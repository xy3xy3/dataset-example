input,output
"Premises:
1.Phoneix's music is classified under the indie pop genre.
2.Phoenix is a band from France.
3.French bands write songs in French or in English.
4.Aside from indie pop, pop rock and synth-pop are two other genres of music.
5.Phoneix has no songs in French.

Conclusion:
Phoenix makes pop rock music.","We can get these predicates:
IndiePop(x),Band(x),France(x),Make(x,y),FrenchSong(x),EnglishSong(x),PopRock(x),SynthPop(x)
We can get these constants:
phoenix
Let's translate one by one.
Premises:
1.Text:Phoneix's music is classified under the indie pop genre.
Predicates:
IndiePop(x)
Constants:
phoenix
Fol:IndiePop(phoenix)
2.Text:Phoenix is a band from France.
Predicates:
Band(x),France(x)
Constants:
phoenix
Fol:Band(phoenix) ∧ France(phoenix)
3.Text:French bands write songs in French or in English.
Predicates:
France(x),EnglishSong(x),Make(x,y),FrenchSong(x),Band(x)
Fol:∀x ∀y (Band(x) ∧ France(x) ∧ Make(x, y) → FrenchSong(y) ⊕ EnglishSong(y))
4.Text:Aside from indie pop, pop rock and synth-pop are two other genres of music.
Predicates:
PopRock(x),SynthPop(x),IndiePop(x)
Fol:∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x))
5.Text:Phoneix has no songs in French.
Predicates:
FrenchSong(x),Make(x,y)
Constants:
phoenix
Fol:∀x (Make(phoenix, x) → ¬FrenchSong(x))
Conclusion:
Text:Phoenix makes pop rock music.
Predicates:
PopRock(x)
Constants:
phoenix
Fol:PopRock(phoenix)"
"Premises:
1.Tyga is a rapper.
2.Rappers release rap albums.
3.Tyga released the Well Done 3 album.
4.Rappers are not opera singers.

Conclusion:
Well Done 3 is a rap album.","We can get these predicates:
IsRapper(x),ReleasedAlbum(x,y),IsRapAlbum(x),IsOperaSinger(x)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:Tyga is a rapper.
Predicates:
IsRapper(x)
Constants:
tyga
Fol:IsRapper(tyga)
2.Text:Rappers release rap albums.
Predicates:
ReleasedAlbum(x,y)
Constants:
tyga,wellDone3
Fol:ReleasedAlbum(tyga, wellDone3)
3.Text:Tyga released the Well Done 3 album.
Predicates:
IsRapper(x),ReleasedAlbum(x,y),IsRapAlbum(x)
Fol:∀x ∀y (IsRapper(x) ∧ ReleasedAlbum(x, y) → IsRapAlbum(y))
4.Text:Rappers are not opera singers.
Predicates:
IsRapper(x),IsOperaSinger(x)
Fol:∀x (IsRapper(x) → ¬IsOperaSinger(x))
Conclusion:
Text:Well Done 3 is a rap album.
Predicates:
IsRapAlbum(x)
Constants:
wellDone3
Fol:IsRapAlbum(wellDone3)"
"Premises:
1.Either present their work at the conference or provide a tutorial session at the conference.
2.All who present their work at the conference will attend in person.
3.All those providing a tutorial session at the conference are invited to join the club.
4.All who attend the conference in person are provided with souvenirs.
5.All invited to join the club are provided with delicious meals.
6.All provided with delicious meals are happy to communicate with each other during the dinner.
7.All provided with delicious meals are invited to take a photo with the audience.
8.James does not attend the conference in person and is not provided with souvenirs.

Conclusion:
James is provided with souvenirs.","We can get these predicates:
Present(x),Tutorial(x),InPerson(x),Invited(x),Souvenirs(x),Meals(x),HappyCommunicate(x),InvitedTakePhoto(x)
We can get these constants:
james
Let's translate one by one.
Premises:
1.Text:Either present their work at the conference or provide a tutorial session at the conference.
Predicates:
Tutorial(x),Present(x)
Fol:∀x ( Present(x) ∨ Tutorial(x))
2.Text:All who present their work at the conference will attend in person.
Predicates:
Present(x),InPerson(x)
Fol:∀x (Present(x) → InPerson(x))
3.Text:All those providing a tutorial session at the conference are invited to join the club.
Predicates:
Invited(x),Tutorial(x)
Fol:∀x (Tutorial(x) → Invited(x))
4.Text:All who attend the conference in person are provided with souvenirs.
Predicates:
Souvenirs(x),InPerson(x)
Fol:∀x (InPerson(x) → Souvenirs(x))
5.Text:All invited to join the club are provided with delicious meals.
Predicates:
Invited(x),Meals(x)
Fol:∀x (Invited(x) → Meals(x))
6.Text:All provided with delicious meals are happy to communicate with each other during the dinner.
Predicates:
Meals(x),HappyCommunicate(x)
Fol:∀x (Meals(x) → HappyCommunicate(x))
7.Text:All provided with delicious meals are invited to take a photo with the audience.
Predicates:
Meals(x),InvitedTakePhoto(x)
Fol:∀x (Meals(x) → InvitedTakePhoto(x))
8.Text:James does not attend the conference in person and is not provided with souvenirs.
Predicates:
Souvenirs(x),InPerson(x)
Constants:
james
Fol:¬(InPerson(james) ∧ Souvenirs(james))
Conclusion:
Text:James is provided with souvenirs.
Predicates:
Souvenirs(x)
Constants:
james
Fol:Souvenirs(james)"
"Premises:
1.All cancers are malignant tumors.
2.No malignant tumor can be treated at home.
3.All colorectal cancer is cancer.
4.Having a cold can be treated at home.
5.Breast cancer is neither having a cold nor a malignant tumor (exclusive).

Conclusion:
Breast cancer is colorectal cancer.","We can get these predicates:
Cancer(x),MalignantTumor(x),CanBeTreatedAtHome(x),ColorectalCancer(x),HavingACold(x)
We can get these constants:
breastCancer
Let's translate one by one.
Premises:
1.Text:All cancers are malignant tumors.
Predicates:
MalignantTumor(x),Cancer(x)
Fol:∀x (Cancer(x) → MalignantTumor(x))
2.Text:No malignant tumor can be treated at home.
Predicates:
CanBeTreatedAtHome(x),MalignantTumor(x)
Fol:∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))
3.Text:All colorectal cancer is cancer.
Predicates:
ColorectalCancer(x),Cancer(x)
Fol:∀x (ColorectalCancer(x) → Cancer(x))
4.Text:Having a cold can be treated at home.
Predicates:
CanBeTreatedAtHome(x),HavingACold(x)
Fol:∀x (HavingACold(x) → CanBeTreatedAtHome(x))
5.Text:Breast cancer is neither having a cold nor a malignant tumor (exclusive).
Predicates:
HavingACold(x),MalignantTumor(x)
Constants:
breastCancer
Fol:¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))
Conclusion:
Text:Breast cancer is colorectal cancer.
Predicates:
ColorectalCancer(x)
Constants:
breastCancer
Fol:ColorectalCancer(breastCancer)"
"Premises:
1.If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees.
2.Some customers go to cinemas every week.
3.Customers who prefer TV series will not watch TV series in cinemas.
4.James watches TV series in cinemas.
5.James subscribes to AMC A List.
6.Peter prefers TV series.

Conclusion:
James is not able to watch 3 movies every week without any additional fees.","We can get these predicates:
SubscribedTo(x,y),ThreeMovies(x),NoFees(x),CinemaEveryWeek(x),Prefer(x,y),WatchTVIn(x,y)
We can get these constants:
tvseries,peter
Let's translate one by one.
Premises:
1.Text:If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees.
Predicates:
NoFees(x),SubscribedTo(x,y),ThreeMovies(x)
Constants:
amcalist
Fol:∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))
2.Text:Some customers go to cinemas every week.
Predicates:
CinemaEveryWeek(x)
Fol:∃x (CinemaEveryWeek(x))
3.Text:Customers who prefer TV series will not watch TV series in cinemas.
Predicates:
Prefer(x,y),WatchTVIn(x,y)
Constants:
tvseries,cinemas
Fol:∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))
4.Text:James watches TV series in cinemas.
Predicates:
WatchTVIn(x,y)
Constants:
cinemas,james
Fol:WatchTVIn(james, cinemas)
5.Text:James subscribes to AMC A List.
Predicates:
SubscribedTo(x,y)
Constants:
james,amcalist
Fol:SubscribedTo(james, amcalist)
6.Text:Peter prefers TV series.
Predicates:
Prefer(x,y)
Constants:
peter,tvseries
Fol:Prefer(peter, tvseries)
Conclusion:
Text:James is not able to watch 3 movies every week without any additional fees.
Predicates:
NoFees(x),ThreeMovies(x)
Constants:
james
Fol:¬(ThreeMovies(james) ∧ NoFees(james))"
"Premises:
1.UFC Fight Night was a mixed martial arts event and was held in Sweden.
2.At UFC Fight Night, Sadollah was scheduled to fight Musoke.
3.Sadollah fought Akiyama at UFC Fight Night.
4.Musoke fought Yakovlev at UFC Fight Night.
5.Jung was injured at UFC Fight Night.
6.Injured people did not fight at UFC Fight Night.

Conclusion:
Jung did not fight at UFC Fight Night.","We can get these predicates:
Event(x),MixedMartial(x),Sweden(x),ScheduledToFight(x,y),Fight(x,y),Injured(x),FightInUFC(x)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:UFC Fight Night was a mixed martial arts event and was held in Sweden.
Predicates:
MixedMartial(x),Sweden(x),Event(x)
Constants:
uFCFightNight
Fol:Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)
2.Text:At UFC Fight Night, Sadollah was scheduled to fight Musoke.
Predicates:
Event(x),ScheduledToFight(x,y)
Constants:
musoke,uFCFightNight,sadollah
Fol:Event(uFCFightNight) → ScheduledToFight(sadollah, musoke)
3.Text:Sadollah fought Akiyama at UFC Fight Night.
Predicates:
Fight(x,y),Event(x)
Constants:
akiyama,uFCFightNight,sadollah
Fol:Event(uFCFightNight) → Fight(sadollah, akiyama)
4.Text:Musoke fought Yakovlev at UFC Fight Night.
Predicates:
Fight(x,y),Event(x)
Constants:
musoke,uFCFightNight
Fol:Event(uFCFightNight) → Fight(musoke, yakovlev)
5.Text:Jung was injured at UFC Fight Night.
Predicates:
Injured(x),Event(x)
Constants:
jung,uFCFightNight
Fol:Event(uFCFightNight) → Injured(jung)
6.Text:Injured people did not fight at UFC Fight Night.
Predicates:
FightInUFC(x),Injured(x)
Fol:∀x (Injured(x) → ¬FightInUFC(x))
Conclusion:
Text:Jung did not fight at UFC Fight Night.
Predicates:
FightInUFC(x)
Constants:
jung
Fol:¬FightInUFC(jung)"
"Premises:
1.If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.
2.If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.
3.If people are big fans of pop bands and singers, then they have a lot of decorations in their room.
4.All young teenage girls who attend college are big fans of pop bands and singers.
5.If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.

Conclusion:
Sam is a young teenage girl who attends college.","We can get these predicates:
Decor(x),MoveOut(x),Ambitious(x),Fans(x),CollegeTeen(x)
We can get these constants:
sam
Let's translate one by one.
Premises:
1.Text:If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.
Predicates:
Decor(x),MoveOut(x)
Fol:∀x (Decor(x) → ¬MoveOut(x))
2.Text:If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.
Predicates:
MoveOut(x),Ambitious(x)
Fol:∀x (Ambitious(x) → MoveOut(x))
3.Text:If people are big fans of pop bands and singers, then they have a lot of decorations in their room.
Predicates:
Decor(x),Fans(x)
Fol:∀x (Fans(x) → Decor(x))
4.Text:All young teenage girls who attend college are big fans of pop bands and singers.
Predicates:
CollegeTeen(x),Ambitious(x)
Fol:∀x (CollegeTeen(x) → Ambitious(x))
5.Text:If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.
Predicates:
Ambitious(x),Fans(x)
Constants:
sam
Fol:Ambitious(sam) → Fans(sam)
Conclusion:
Text:Sam is a young teenage girl who attends college.
Predicates:
CollegeTeen(x)
Constants:
sam
Fol:CollegeTeen(sam)"
"Premises:
1.All drinks are edible.
2.All juices are drinks.
3.All orange juice is a juice.
4.A juice is either an orange juice or an apple juice.
5.All apple juice is sweet.
6.If coke is apple juice, then coke is a drink.
7.If coke is not apple juice, then coke is not edible.

Conclusion:
Coke is orange juice.","We can get these predicates:
Drink(x),Edible(x),Juice(x),OrangeJuice(x),AppleJuice(x),Sweet(x)
We can get these constants:
coke
Let's translate one by one.
Premises:
1.Text:All drinks are edible.
Predicates:
Drink(x),Edible(x)
Fol:∀x (Drink(x) → Edible(x))
2.Text:All juices are drinks.
Predicates:
Drink(x),Juice(x)
Fol:∀x (Juice(x) → Drink(x))
3.Text:All orange juice is a juice.
Predicates:
Juice(x),OrangeJuice(x)
Fol:∀x (OrangeJuice(x) → Juice(x))
4.Text:A juice is either an orange juice or an apple juice.
Predicates:
OrangeJuice(x),AppleJuice(x)
Fol:∀x (OrangeJuice(x) ∨ AppleJuice(x))
5.Text:All apple juice is sweet.
Predicates:
Sweet(x),AppleJuice(x)
Fol:∀x (AppleJuice(x) → Sweet(x))
6.Text:If coke is apple juice, then coke is a drink.
Predicates:
Drink(x),AppleJuice(x)
Constants:
coke
Fol:AppleJuice(coke) → Drink(coke)
7.Text:If coke is not apple juice, then coke is not edible.
Predicates:
AppleJuice(x),Edible(x)
Constants:
coke
Fol:¬AppleJuice(coke) → ¬Edible(coke)
Conclusion:
Text:Coke is orange juice.
Predicates:
OrangeJuice(x)
Constants:
coke
Fol:OrangeJuice(coke)"
"Premises:
1.Boves is a railway station located in France.
2.The preceding station of Boves is Longueau.
3.The preceding station of Dommartin is Boves.
4.France is a European country.
5.Dommartin is situated on the Paris–Lille railway.
6.Any two contiguous stations are on the same railway.
7.Boves is served by regional TER Hauts-de-France trains.
8.If A is located in B and B is located in C, then A is located in C.
9.If A precedes B and B preceds C, than A preceds C.

Conclusion:
Boves is not in Europe.","We can get these predicates:
RailwayStation(x),Locate(x,y),Precede(x,y),Situate(x,y),Serve(x,y)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:Boves is a railway station located in France.
Predicates:
Locate(x,y),RailwayStation(x)
Constants:
boves,france
Fol:RailwayStation(boves) ∧ Locate(boves, france)
2.Text:The preceding station of Boves is Longueau.
Predicates:
Precede(x,y)
Constants:
boves,longueau
Fol:Precede(boves, longueau)
3.Text:The preceding station of Dommartin is Boves.
Predicates:
Precede(x,y)
Constants:
boves,dommartin
Fol:Precede(dommartin, boves)
4.Text:France is a European country.
Predicates:
Locate(x,y)
Constants:
france,europe
Fol:Locate(france, europe)
5.Text:Dommartin is situated on the Paris–Lille railway.
Predicates:
Situate(x,y)
Constants:
pairsLille,dommartin
Fol:Situate(dommartin, pairsLille)
6.Text:Any two contiguous stations are on the same railway.
Predicates:
Precede(x,y),Situate(x,y)
Fol:∀x ∀y ∀z ((Situate(x, z) ∧ (Precede(x, y) ∨ Precede(y, x))) → Situate(y, z))
7.Text:Boves is served by regional TER Hauts-de-France trains.
Predicates:
Serve(x,y)
Constants:
boves,hautsDeFrance
Fol:Serve(hautsDeFrance, boves)
8.Text:If A is located in B and B is located in C, then A is located in C.
Predicates:
Locate(x,y)
Fol:∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))
9.Text:If A precedes B and B preceds C, than A preceds C.
Predicates:
Precede(x,y)
Fol:∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))
Conclusion:
Text:Boves is not in Europe.
Predicates:
Locate(x,y)
Constants:
boves,europe
Fol:¬Locate(boves, europe)"
"Premises:
1.No shoes are food.
2.All slippers are shoes.
3.A thing is either food or clothes.
4.No wearable things are airtight.
5.All clothes are wearable.
6.If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes.

Conclusion:
Watch is a slipper.","We can get these predicates:
Shoes(x),Food(x),Slipper(x),Clothes(x),Wearable(x),AirTight(x)
We can get these constants:
watch
Let's translate one by one.
Premises:
1.Text:No shoes are food.
Predicates:
Food(x),Shoes(x)
Fol:∀x (Shoes(x) → ¬Food(x))
2.Text:All slippers are shoes.
Predicates:
Shoes(x),Slipper(x)
Fol:∀x (Slipper(x) → Shoes(x))
3.Text:A thing is either food or clothes.
Predicates:
Food(x),Clothes(x)
Fol:∀x (Food(x) ⊕ Clothes(x))
4.Text:No wearable things are airtight.
Predicates:
Wearable(x),AirTight(x)
Fol:∀x (Wearable(x) → ¬AirTight(x))
5.Text:All clothes are wearable.
Predicates:
Wearable(x),Clothes(x)
Fol:∀x (Clothes(x) → Wearable(x))
6.Text:If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes.
Predicates:
Clothes(x),AirTight(x)
Constants:
watch
Fol:¬(AirTight(watch) ∧ Clothes(watch)) → (AirTight(watch) ∧ Clothes(watch)) ⊕ (¬AirTight(watch) ∧ ¬Clothes(watch))
Conclusion:
Text:Watch is a slipper.
Predicates:
Slipper(x)
Constants:
watch
Fol:Slipper(watch)"
"Premises:
1.Rafa Nadal was born in Mallorca.
2.Rafa Nadal is a professional tennis player.
3.Nadal's win ratio is higher than 80%.
4.All players in the Big 3 are professionals who have a high win ratio.

Conclusion:
Nadal is in the Big 3.","We can get these predicates:
BornIn(x,y),ProfessionalTennisPlayer(x),HighWinRatio(x),InBig3(x)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:Rafa Nadal was born in Mallorca.
Predicates:
BornIn(x,y)
Constants:
rafaNadal,mallorca
Fol:BornIn(rafaNadal, mallorca)
2.Text:Rafa Nadal is a professional tennis player.
Predicates:
ProfessionalTennisPlayer(x)
Constants:
rafaNadal
Fol:ProfessionalTennisPlayer(rafaNadal)
3.Text:Nadal's win ratio is higher than 80%.
Predicates:
HighWinRatio(x)
Constants:
rafaNadal
Fol:HighWinRatio(rafaNadal)
4.Text:All players in the Big 3 are professionals who have a high win ratio.
Predicates:
ProfessionalTennisPlayer(x),HighWinRatio(x),InBig3(x)
Fol:∀x (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))
Conclusion:
Text:Nadal is in the Big 3.
Predicates:
InBig3(x)
Constants:
rafaNadal
Fol:InBig3(rafaNadal)"
"Premises:
1.If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.
2.If a soccer player receives one red card in one game, this player will be ejected from the rest of the game.
3.Henry is a soccer player.
4.In one game, Henry first receives one yellow card, then he receives one red card.

Conclusion:
Henry will be ejected from the rest of the game.","We can get these predicates:
SoccerPlayer(x),TwoYellow(x),Eject(x),OneRed(x)
We can get these constants:
henry
Let's translate one by one.
Premises:
1.Text:If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.
Predicates:
TwoYellow(x),Eject(x),SoccerPlayer(x)
Fol:∀x (SoccerPlayer(x) ∧ TwoYellow(x) → Eject(x))
2.Text:If a soccer player receives one red card in one game, this player will be ejected from the rest of the game.
Predicates:
OneRed(x),Eject(x),SoccerPlayer(x)
Fol:∀x (SoccerPlayer(x) ∧ OneRed(x) → Eject(x))
3.Text:Henry is a soccer player.
Predicates:
SoccerPlayer(x)
Constants:
henry
Fol:SoccerPlayer(henry)
4.Text:In one game, Henry first receives one yellow card, then he receives one red card.
Predicates:
TwoYellow(x),OneRed(x)
Constants:
henry
Fol:¬TwoYellow(henry) ∧ OneRed(henry)
Conclusion:
Text:Henry will be ejected from the rest of the game.
Predicates:
Eject(x)
Constants:
henry
Fol:Eject(henry)"
"Premises:
1.There are no mansion houses in an urban area.
2.All skyscrapers reside in urban areas.
3.Every creepy haunted house is in a mansion house.
4.Every terrifying Halloween scare comes from a creepy haunted house.
5.The Scream is a creepy haunted house or a terrifying Halloween scare.

Conclusion:
The Scream is either a skyscraper or a mansion house.","We can get these predicates:
UrbanArea(x),MansionHouse(x),Skyscraper(x),CreepyHauntedHouse(x),TerrifyingHalloweenScare(x)
We can get these constants:
thescream
Let's translate one by one.
Premises:
1.Text:There are no mansion houses in an urban area.
Predicates:
UrbanArea(x),MansionHouse(x)
Fol:∀x (UrbanArea(x) → ¬MansionHouse(x))
2.Text:All skyscrapers reside in urban areas.
Predicates:
Skyscraper(x),UrbanArea(x)
Fol:∀x (Skyscraper(x) → UrbanArea(x))
3.Text:Every creepy haunted house is in a mansion house.
Predicates:
CreepyHauntedHouse(x),MansionHouse(x)
Fol:∀x (CreepyHauntedHouse(x) → MansionHouse(x))
4.Text:Every terrifying Halloween scare comes from a creepy haunted house.
Predicates:
CreepyHauntedHouse(x),TerrifyingHalloweenScare(x)
Fol:∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))
5.Text:The Scream is a creepy haunted house or a terrifying Halloween scare.
Predicates:
CreepyHauntedHouse(x),TerrifyingHalloweenScare(x)
Constants:
thescream
Fol:CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)
Conclusion:
Text:The Scream is either a skyscraper or a mansion house.
Predicates:
Skyscraper(x),MansionHouse(x)
Constants:
thescream
Fol:Skyscraper(thescream) ∨ MansionHouse(thescream)"
"Premises:
1.Some students who major in computer science get up early.
2.If a student gets up early, then he/she will study in the morning.
3.All students studying in the morning are good at time management.
4.All students good at time management are popular among students.
5.James is not popular among students.

Conclusion:
James majors in computer science and gets up early.","We can get these predicates:
ComputerScience(x),GetUpEarly(x),StudyMorning(x),GoodAtTimeManagement(x),Popular(x)
We can get these constants:
james
Let's translate one by one.
Premises:
1.Text:Some students who major in computer science get up early.
Predicates:
ComputerScience(x),GetUpEarly(x)
Fol:∃x (ComputerScience(x) ∧ GetUpEarly(x))
2.Text:If a student gets up early, then he/she will study in the morning.
Predicates:
GetUpEarly(x),StudyMorning(x)
Fol:∀x (GetUpEarly(x) → StudyMorning(x))
3.Text:All students studying in the morning are good at time management.
Predicates:
GoodAtTimeManagement(x),StudyMorning(x)
Fol:∀x (StudyMorning(x) → GoodAtTimeManagement(x))
4.Text:All students good at time management are popular among students.
Predicates:
Popular(x),GoodAtTimeManagement(x)
Fol:∀x (GoodAtTimeManagement(x) → Popular(x))
5.Text:James is not popular among students.
Predicates:
Popular(x)
Constants:
james
Fol:¬Popular(james)
Conclusion:
Text:James majors in computer science and gets up early.
Predicates:
ComputerScience(x),GetUpEarly(x)
Constants:
james
Fol:ComputerScience(james) ∧ GetUpEarly(james)"
"Premises:
1.There is no dog on the roof.
2.If there is a dog on the roof something went wrong.

Conclusion:
Something went wrong.","We can get these predicates:
Dog(x),OnRoof(x),WentWrong(x)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:There is no dog on the roof.
Predicates:
Dog(x),OnRoof(x)
Fol:¬(∃x (Dog(x) ∧ OnRoof(x)))
2.Text:If there is a dog on the roof something went wrong.
Predicates:
WentWrong(x),Dog(x),OnRoof(x)
Fol:∀x ∃y ((Dog(x) ∧ OnRoof(x)) → WentWrong(y))
Conclusion:
Text:Something went wrong.
Predicates:
WentWrong(x)
Fol:∃y WentWrong(y)"
"Premises:
1.Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.
2.Many apartment rents cover the cost of water and electricity.
3.Susan lives in an apartment where the rent covers all utilities.
4.The rent of the apartment where Ava lives does not cover any utility expenses.
5.Noah lives in an apartment where the rent does not cover heating.

Conclusion:
Noah and Ava both need to pay the heating bill.","We can get these predicates:
CommonUtilities(x),Cover(x,y)
We can get these constants:
noah,heating
Let's translate one by one.
Premises:
1.Text:Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.
Predicates:
CommonUtilities(x)
Constants:
electricity,heating,gas,water
Fol:CommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)
2.Text:Many apartment rents cover the cost of water and electricity.
Predicates:
Cover(x,y)
Constants:
electricity,water
Fol:∃x (Cover(x, water) ∧ Cover(x, electricity))
3.Text:Susan lives in an apartment where the rent covers all utilities.
Predicates:
Cover(x,y)
Constants:
susan
Fol:∀x (Cover(susan, x))
4.Text:The rent of the apartment where Ava lives does not cover any utility expenses.
Predicates:
Cover(x,y)
Constants:
ava
Fol:∀x (¬Cover(ava, x))
5.Text:Noah lives in an apartment where the rent does not cover heating.
Predicates:
Cover(x,y)
Constants:
heating,noah
Fol:¬Cover(noah, heating)
Conclusion:
Text:Noah and Ava both need to pay the heating bill.
Predicates:
Cover(x,y)
Constants:
ava,heating,noah
Fol:¬Cover(noah, heating) ∧ ¬Cover(ava, heating)"
"Premises:
1.All pets are animals.
2.Pets can be either a dog or a cat.
3.If a person has a pet, they care for that pet.
4.Dogs and Cats can be naughty.
5.Pets who are naughty are not liked as much.
6.Charlie has a naughty pet dog named Leo.

Conclusion:
Leo is an animal.","We can get these predicates:
Pet(x),Animal(x),Dog(x),Cat(x),HasPet(x),Cares(x,y),Naughty(x),Liked(x,y)
We can get these constants:
charlie,leo
Let's translate one by one.
Premises:
1.Text:All pets are animals.
Predicates:
Animal(x),Pet(x)
Fol:∀x (Pet(x) → Animal(x))
2.Text:Pets can be either a dog or a cat.
Predicates:
Cat(x),Pet(x),Dog(x)
Fol:∀x (Pet(x) → Dog(x) ⊕ Cat(x))
3.Text:If a person has a pet, they care for that pet.
Predicates:
Cares(x,y),HasPet(x)
Fol:∀x ∀y (HasPet(x) → Cares(x, y))
4.Text:Dogs and Cats can be naughty.
Predicates:
Cat(x),Naughty(x),Dog(x)
Fol:∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))
5.Text:Pets who are naughty are not liked as much.
Predicates:
Naughty(x),Pet(x),Liked(x,y)
Fol:∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))
6.Text:Charlie has a naughty pet dog named Leo.
Predicates:
Pet(x),Naughty(x),HasPet(x),Dog(x)
Constants:
charlie,leo
Fol:HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)
Conclusion:
Text:Leo is an animal.
Predicates:
Animal(x)
Constants:
leo
Fol:Animal(leo)"
"Premises:
1.Show Your Love is a song recorded by the South Korean boy band BtoB 4u.
2.The lead single of the extended play Inside is Show Your Love.
3.Show Your Love contains a hopeful message.
4.BtoB 4u member Hyunsik wrote Show Your Love.
5.There is a music video for Show Your Love.

Conclusion:
Show your love wasn't written by a member of a boy band.","We can get these predicates:
Song(x),RecordedBy(x,y),SouthKorean(x),BoyBand(x),ExtendedPlay(x),LeadSingle(x),LeadSingleOf(x,y),Contains(x,y),Member(x,y),Wrote(x,y),HasMusicVideo(x)
We can get these constants:
showyourlove
Let's translate one by one.
Premises:
1.Text:Show Your Love is a song recorded by the South Korean boy band BtoB 4u.
Predicates:
SouthKorean(x),BoyBand(x),RecordedBy(x,y),Song(x)
Constants:
btob4u,showyourlove
Fol:Song(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u)
2.Text:The lead single of the extended play Inside is Show Your Love.
Predicates:
ExtendedPlay(x),LeadSingleOf(x,y),LeadSingle(x)
Constants:
showyourlove,inside
Fol:ExtendedPlay(inside) ∧ LeadSingle(showyourlove) ∧ LeadSingleOf(showyourlove, inside)
3.Text:Show Your Love contains a hopeful message.
Predicates:
Contains(x,y)
Constants:
hopefulmessage,showyourlove
Fol:Contains(showyourlove, hopefulmessage)
4.Text:BtoB 4u member Hyunsik wrote Show Your Love.
Predicates:
Member(x,y),Wrote(x,y)
Constants:
hyunsik,btob4u,showyourlove
Fol:Member(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove)
5.Text:There is a music video for Show Your Love.
Predicates:
HasMusicVideo(x)
Constants:
showyourlove
Fol:HasMusicVideo(showyourlove)
Conclusion:
Text:Show your love wasn't written by a member of a boy band.
Predicates:
Member(x,y),Wrote(x,y)
Constants:
btob4u,showyourlove
Fol:¬∃x (Member(x, btob4u) ∧ Wrote(x, showyourlove))"
"Premises:
1.Either brain reading or brain decoding.
2.All brain decoding is extracting information from BOLD signals.
3.No extracting information from BOLD signals is without statistical pattern analysis.
4.Writing a novel is without statistical pattern analysis.
5.If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.

Conclusion:
Multivoxel (pattern) analysis is the writing of a novel.","We can get these predicates:
BrainReading(x),BrainDecoding(x),ExtractingInformationFromBOLDSignals(x),WithoutStatisticalPatternAnalysis(x),WritingANovel(x)
We can get these constants:
multivoxelPatternAnalysis
Let's translate one by one.
Premises:
1.Text:Either brain reading or brain decoding.
Predicates:
BrainReading(x),BrainDecoding(x)
Fol:∀x (BrainReading(x) ∨ BrainDecoding(x))
2.Text:All brain decoding is extracting information from BOLD signals.
Predicates:
ExtractingInformationFromBOLDSignals(x),BrainDecoding(x)
Fol:∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))
3.Text:No extracting information from BOLD signals is without statistical pattern analysis.
Predicates:
WithoutStatisticalPatternAnalysis(x),ExtractingInformationFromBOLDSignals(x)
Fol:∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))
4.Text:Writing a novel is without statistical pattern analysis.
Predicates:
WithoutStatisticalPatternAnalysis(x),WritingANovel(x)
Fol:∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x))
5.Text:If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.
Predicates:
WithoutStatisticalPatternAnalysis(x),BrainReading(x),BrainDecoding(x)
Constants:
multivoxelPatternAnalysis
Fol:WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)
Conclusion:
Text:Multivoxel (pattern) analysis is the writing of a novel.
Predicates:
WritingANovel(x)
Constants:
multivoxelPatternAnalysis
Fol:WritingANovel(multivoxelPatternAnalysis)"
"Premises:
1.All defenders are soccer players.
2.No soccer players are professional basketball players.
3.All centerbacks are defenders.
4.All NBA players are professional basketball players.
5.If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player.

Conclusion:
Stephen Curry is not a centerback.","We can get these predicates:
Defender(x),SoccerPlayer(x),ProfessionalBasketballPlayer(x),CenterBack(x),NBAPlayer(x)
We can get these constants:
stephencurry
Let's translate one by one.
Premises:
1.Text:All defenders are soccer players.
Predicates:
SoccerPlayer(x),Defender(x)
Fol:∀x (Defender(x) → SoccerPlayer(x))
2.Text:No soccer players are professional basketball players.
Predicates:
ProfessionalBasketballPlayer(x),SoccerPlayer(x)
Fol:∀x (SoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))
3.Text:All centerbacks are defenders.
Predicates:
CenterBack(x),Defender(x)
Fol:∀x (CenterBack(x) → Defender(x))
4.Text:All NBA players are professional basketball players.
Predicates:
NBAPlayer(x),ProfessionalBasketballPlayer(x)
Fol:∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))
5.Text:If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player.
Predicates:
NBAPlayer(x),SoccerPlayer(x)
Constants:
stephencurry
Fol:¬NBAPlayer(stephencurry) → ¬(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry))
Conclusion:
Text:Stephen Curry is not a centerback.
Predicates:
CenterBack(x)
Constants:
stephencurry
Fol:¬CenterBack(stephencurry)"
"Premises:
1.If you go somewhere by train, you will not lose time.
2.If you go somewhere by car and meet traffic jam, you will lose time.
3.If you lose time, you will be late for work.
4.Mary can get from New Haven to New York City either by train or car.
5.Mary is late for work.

Conclusion:
Mary gets from New Haven to New York City by car.","We can get these predicates:
Train(x),LoseTime(x),Car(x),MeetJam(x),LateForWork(x)
We can get these constants:
mary
Let's translate one by one.
Premises:
1.Text:If you go somewhere by train, you will not lose time.
Predicates:
Train(x),LoseTime(x)
Fol:∀x (Train(x) → ¬LoseTime(x))
2.Text:If you go somewhere by car and meet traffic jam, you will lose time.
Predicates:
MeetJam(x),Car(x),LoseTime(x)
Fol:∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))
3.Text:If you lose time, you will be late for work.
Predicates:
LateForWork(x),LoseTime(x)
Fol:∀x (LoseTime(x) ↔ LateForWork(x))
4.Text:Mary can get from New Haven to New York City either by train or car.
Predicates:
Train(x),Car(x)
Constants:
mary
Fol:Train(mary) ⊕ Car(mary)
5.Text:Mary is late for work.
Predicates:
LateForWork(x)
Constants:
mary
Fol:LateForWork(mary)
Conclusion:
Text:Mary gets from New Haven to New York City by car.
Predicates:
Car(x)
Constants:
mary
Fol:Car(mary)"
"Premises:
1.The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.
2.All fruits are provided in the same weight at the beginning of the party.
3.If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.
4.At the end of the party, strawberries had the lowest remaining weight.
5.At the end of the party, the amount of leftover blueberries was lower than that of cherries.
6.Benjamin only ate oranges and grapes at the party.

Conclusion:
Benjamin ate blueberries at the party.","We can get these predicates:
Party(x),SameWeight(x),LowestAmount(x),MostPopular(x),Lower(x,y),Eat(x,y)
We can get these constants:
benjamin,blueberry,grape,cherry,orange,strawberry
Let's translate one by one.
Premises:
1.Text:The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.
Predicates:
Party(x)
Constants:
strawberry,blueberry,grape,orange,cherry
Fol:Party(strawberry) ∨ Party(orange) ∨ Party(blueberry) ∨ Party(grape) ∨ Party(cherry)
2.Text:All fruits are provided in the same weight at the beginning of the party.
Predicates:
Party(x),SameWeight(x)
Fol:∀x (Party(x) → SameWeight(x))
3.Text:If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.
Predicates:
LowestAmount(x),MostPopular(x)
Fol:∀x (LowestAmount(x) → MostPopular(x))
4.Text:At the end of the party, strawberries had the lowest remaining weight.
Predicates:
LowestAmount(x)
Constants:
strawberries
Fol:LowestAmount(strawberries)
5.Text:At the end of the party, the amount of leftover blueberries was lower than that of cherries.
Predicates:
Lower(x,y)
Constants:
cherry,blueberry
Fol:Lower(blueberry, cherry)
6.Text:Benjamin only ate oranges and grapes at the party.
Predicates:
Eat(x,y)
Constants:
strawberry,blueberry,benjamin,grape,orange,cherry
Fol:Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)
Conclusion:
Text:Benjamin ate blueberries at the party.
Predicates:
Eat(x,y)
Constants:
blueberry,benjamin
Fol:Eat(blueberry, benjamin)"
"Premises:
1.Beasts of Prey is either a fantasy novel or a science fiction novel.
2.Science fiction novels are not about mythological creatures
3.Beasts of Prey Is about a creature known as the Shetani.
4.Shetanis are mythological.

Conclusion:
Beasts of prey is a fantasy novel.","We can get these predicates:
Novel(x),Fantasy(x),ScienceFiction(x),Mythological(x),Creature(x),About(x,y)
We can get these constants:
shetani
Let's translate one by one.
Premises:
1.Text:Beasts of Prey is either a fantasy novel or a science fiction novel.
Predicates:
Fantasy(x),Novel(x),ScienceFiction(x)
Constants:
beastsofprey
Fol:Novel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)
2.Text:Science fiction novels are not about mythological creatures
Predicates:
About(x,y),Mythological(x),Creature(x),ScienceFiction(x)
Fol:∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))
3.Text:Beasts of Prey Is about a creature known as the Shetani.
Predicates:
About(x,y),Creature(x)
Constants:
shetani,beastsofprey
Fol:About(beastsofprey, shetani) ∧ Creature(shetani)
4.Text:Shetanis are mythological.
Predicates:
Mythological(x)
Constants:
shetani
Fol:Mythological(shetani)
Conclusion:
Text:Beasts of prey is a fantasy novel.
Predicates:
Fantasy(x)
Constants:
beastsofprey
Fol:Fantasy(beastsofprey)"
"Premises:
1.Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.
2.Baku is northwest of Shafaq-Asiman.
3.If place A is northwest of place B, then place B is southeast of place A.

Conclusion:
A large complex is southeast of Baku.","We can get these predicates:
LargeComplex(x),Offshore(x),GeologicalStructures(x),In(x,y),NorthwestOf(x,y),SoutheastOf(x,y)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.
Predicates:
Offshore(x),In(x,y),GeologicalStructures(x),LargeComplex(x)
Constants:
shafaq-asiman,caspiansea
Fol:LargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)
2.Text:Baku is northwest of Shafaq-Asiman.
Predicates:
NorthwestOf(x,y)
Constants:
shafaq-asiman,baku
Fol:NorthwestOf(baku, shafaq-asiman)
3.Text:If place A is northwest of place B, then place B is southeast of place A.
Predicates:
SoutheastOf(x,y),NorthwestOf(x,y)
Fol:∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))
Conclusion:
Text:A large complex is southeast of Baku.
Predicates:
SoutheastOf(x,y),LargeComplex(x)
Constants:
baku
Fol:∃x (LargeComplex(x) ∧ SoutheastOf(x, baku))"
"Premises:
1.Camp Davern is a traditional summer camp for boys and girls.
2.Camp Davern was established in the year 1946.
3.Camp Davern was operated by the YMCA until the year 2015.
4.Camp Davern is one of Ontario's oldest summer camps.

Conclusion:
One of Ontario's oldest summer camps is a traditional summer camp for boys and girls.","We can get these predicates:
TraditionalSummerCamp(x),ForBoysAndGirls(x),EstablishedIn(x,y),OperatedByYMCAUntil(x,y),OneOf(x,y)
We can get these constants:
campdavern,ontariosoldestsummercamps
Let's translate one by one.
Premises:
1.Text:Camp Davern is a traditional summer camp for boys and girls.
Predicates:
TraditionalSummerCamp(x),ForBoysAndGirls(x)
Constants:
campdavern
Fol:TraditionalSummerCamp(campdavern) ∧ ForBoysAndGirls(campdavern)
2.Text:Camp Davern was established in the year 1946.
Predicates:
EstablishedIn(x,y)
Constants:
campdavern
Fol:EstablishedIn(campdavern, year1946)
3.Text:Camp Davern was operated by the YMCA until the year 2015.
Predicates:
OperatedByYMCAUntil(x,y)
Constants:
campdavern
Fol:OperatedByYMCAUntil(campdavern, year2015)
4.Text:Camp Davern is one of Ontario's oldest summer camps.
Predicates:
OneOf(x,y)
Constants:
campdavern,ontariosoldestsummercamps
Fol:OneOf(campdavern, ontariosoldestsummercamps)
Conclusion:
Text:One of Ontario's oldest summer camps is a traditional summer camp for boys and girls.
Predicates:
OneOf(x,y),TraditionalSummerCamp(x),ForBoysAndGirls(x)
Constants:
ontariosoldestsummercamps
Fol:∃x (OneOf(x, ontariosoldestsummercamps) ∧ TraditionalSummerCamp(x) ∧ ForBoysAndGirls(x))"
"Premises:
1.The National Lobster Hatchery is a hatchery located in Padstow England.
2.The National Lobster Hatchery is open to visitors.
3.A hatchery is either for profit, or for conservation.
4.If a hatchery is for conservation, it might release animals into the wild.
5.The National Lobster Hatchery is not for profit.

Conclusion:
The National Lobster Hatchery releases animals into the wild.","We can get these predicates:
Hatchery(x),LocatedIn(x,y),OpenToVisitors(x),ForConservation(x),ForProfit(x),ReleasesAnimalsToWild(x)
We can get these constants:
nationallobsterhatchery
Let's translate one by one.
Premises:
1.Text:The National Lobster Hatchery is a hatchery located in Padstow England.
Predicates:
Hatchery(x),LocatedIn(x,y)
Constants:
nationallobsterhatchery,padstowengland
Fol:Hatchery(nationallobsterhatchery) ∧ LocatedIn(nationallobsterhatchery, padstowengland)
2.Text:The National Lobster Hatchery is open to visitors.
Predicates:
OpenToVisitors(x)
Constants:
nationallobsterhatchery
Fol:OpenToVisitors(nationallobsterhatchery)
3.Text:A hatchery is either for profit, or for conservation.
Predicates:
Hatchery(x),ForConservation(x),ForProfit(x)
Fol:∀x (Hatchery(x) → ForConservation(x) ∨ ForProfit(x))
4.Text:If a hatchery is for conservation, it might release animals into the wild.
Predicates:
Hatchery(x),ForConservation(x),ReleasesAnimalsToWild(x)
Fol:∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleasesAnimalsToWild(x))
5.Text:The National Lobster Hatchery is not for profit.
Predicates:
ForProfit(x)
Constants:
nationallobsterhatchery
Fol:¬ForProfit(nationallobsterhatchery)
Conclusion:
Text:The National Lobster Hatchery releases animals into the wild.
Predicates:
ReleasesAnimalsToWild(x)
Constants:
nationallobsterhatchery
Fol:ReleasesAnimalsToWild(nationallobsterhatchery)"
"Premises:
1.Brian Winter is a Scottish football referee.
2.After being injured, Brian Winter retired in 2012.
3.Brian Winter was appointed as a referee observer after his retirement.
4.Some football referees become referee observers.
5.The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.

Conclusion:
There is a son of a referee observer that plays football.","We can get these predicates:
Scottish(x),FootballReferee(x),Injured(x),Retired(x),RefereeObserver(x),Son(x,y),FootballPlayer(x),PlaysFor(x,y)
We can get these constants:
hamiltonacademical,brianwinter,andywinter
Let's translate one by one.
Premises:
1.Text:Brian Winter is a Scottish football referee.
Predicates:
FootballReferee(x),Scottish(x)
Constants:
brianwinter
Fol:Scottish(brianwinter) ∧ FootballReferee(brianwinter)
2.Text:After being injured, Brian Winter retired in 2012.
Predicates:
Injured(x),Retired(x)
Constants:
brianwinter
Fol:Injured(brianwinter) ∧ Retired(brianwinter)
3.Text:Brian Winter was appointed as a referee observer after his retirement.
Predicates:
RefereeObserver(x)
Constants:
brianwinter
Fol:RefereeObserver(brianwinter)
4.Text:Some football referees become referee observers.
Predicates:
FootballReferee(x),RefereeObserver(x)
Fol:∃x (FootballReferee(x) ∧ RefereeObserver(x))
5.Text:The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.
Predicates:
FootballPlayer(x),PlaysFor(x,y),Son(x,y)
Constants:
brianwinter,hamiltonacademical,andywinter
Fol:Son(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)
Conclusion:
Text:There is a son of a referee observer that plays football.
Predicates:
RefereeObserver(x),FootballPlayer(x),Son(x,y)
Fol:∃x (∃y (Son(x, y) ∧ RefereeObserver(y)) ∧ FootballPlayer(x))"
"Premises:
1.All disposable chopsticks are made from trees.
2.Some chopsticks are eco-friendly.
3.Either disposable chopsticks or reusable chopsticks.
4.If chopsticks are made from metals, then they are not made from plastics.
5.All reusable chopsticks are made from metal.
6.Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics.

Conclusion:
If Chopsticks at restaurants are made from plastics or made from trees, then Chopsticks at restaurants are made from plastics and are eco-friendly.","We can get these predicates:
DisposableChopsticks(x),MadeFromTrees(x),EcoFriendly(x),Reusable(x),MadeFromMetals(x),MadeFromPlastics(x)
We can get these constants:
chopsticksAtRestaurants
Let's translate one by one.
Premises:
1.Text:All disposable chopsticks are made from trees.
Predicates:
DisposableChopsticks(x),MadeFromTrees(x)
Fol:∀x (DisposableChopsticks(x) → MadeFromTrees(x))
2.Text:Some chopsticks are eco-friendly.
Predicates:
EcoFriendly(x)
Fol:∃x (EcoFriendly(x))
3.Text:Either disposable chopsticks or reusable chopsticks.
Predicates:
DisposableChopsticks(x),Reusable(x)
Fol:∀x (DisposableChopsticks(x) ⊕ Reusable(x))
4.Text:If chopsticks are made from metals, then they are not made from plastics.
Predicates:
MadeFromPlastics(x),MadeFromMetals(x)
Fol:∀x (MadeFromMetals(x) → ¬MadeFromPlastics(x))
5.Text:All reusable chopsticks are made from metal.
Predicates:
Reusable(x),MadeFromMetals(x)
Fol:∀x (Reusable(x) → MadeFromMetals(x))
6.Text:Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics.
Predicates:
MadeFromPlastics(x),MadeFromMetals(x)
Constants:
chopsticksAtRestaurants
Fol:¬(MadeFromMetals(chopsticksAtRestaurants) ⊕ MadeFromPlastics(chopsticksAtRestaurants))
Conclusion:
Text:If Chopsticks at restaurants are made from plastics or made from trees, then Chopsticks at restaurants are made from plastics and are eco-friendly.
Predicates:
EcoFriendly(x),MadeFromPlastics(x),MadeFromTrees(x)
Constants:
chopsticksAtRestaurants
Fol:(MadeFromPlastics(chopsticksAtRestaurants) ∨ MadeFromTrees(chopsticksAtRestaurants)) → (MadeFromPlastics(chopsticksAtRestaurants) ∧ EcoFriendly(chopsticksAtRestaurants))"
"Premises:
1.Soccer players have a right foot and a left foot.
2.Top soccer players are soccer players who can use their both feet very efficiently.
3.If a soccer player can score many goals using left foot, then they can use that foot very efficiently.
4.If a soccer player can score many goals using right foot, then they can use that foot very efficiently.
5.Cristiano Ronaldo is a soccer player.
6.Cristiano Ronaldo can use his right foot very efficiently.
7.Cristiano Ronaldo have scored more than one hundred goals using his left foot.

Conclusion:
Cristiano Ronaldo is not a top soccer player.","We can get these predicates:
SoccerPlayer(x),HasLeftFoot(x),HasRightFoot(x),Efficient(x,y),Top(x),ScoreManyGoals(x,y)
We can get these constants:
left,ronaldo
Let's translate one by one.
Premises:
1.Text:Soccer players have a right foot and a left foot.
Predicates:
HasLeftFoot(x),HasRightFoot(x),SoccerPlayer(x)
Fol:∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))
2.Text:Top soccer players are soccer players who can use their both feet very efficiently.
Predicates:
Top(x),Efficient(x,y),SoccerPlayer(x)
Constants:
right,left
Fol:∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))
3.Text:If a soccer player can score many goals using left foot, then they can use that foot very efficiently.
Predicates:
Efficient(x,y),ScoreManyGoals(x,y),SoccerPlayer(x)
Constants:
left
Fol:∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))
4.Text:If a soccer player can score many goals using right foot, then they can use that foot very efficiently.
Predicates:
Efficient(x,y),ScoreManyGoals(x,y),SoccerPlayer(x)
Constants:
right
Fol:∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))
5.Text:Cristiano Ronaldo is a soccer player.
Predicates:
SoccerPlayer(x)
Constants:
ronaldo
Fol:SoccerPlayer(ronaldo)
6.Text:Cristiano Ronaldo can use his right foot very efficiently.
Predicates:
Efficient(x,y)
Constants:
right,ronaldo
Fol:Efficient(ronaldo, right)
7.Text:Cristiano Ronaldo have scored more than one hundred goals using his left foot.
Predicates:
ScoreManyGoals(x,y)
Constants:
left,ronaldo
Fol:ScoreManyGoals(ronaldo, left)
Conclusion:
Text:Cristiano Ronaldo is not a top soccer player.
Predicates:
Top(x)
Constants:
ronaldo
Fol:¬Top(ronaldo)"
"Premises:
1.People are either interested in puzzles or bad at chess.
2.If a person is bad at chess, then they don't play a lot of chess.
3.A person is either a planner or a creative person.
4.Erica is someone who plays a lot of chess.
5.If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.

Conclusion:
Erica plans.","We can get these predicates:
Puzzles(x),BadChess(x),PlaysLots(x),Plans(x),Creative(x)
We can get these constants:
erica
Let's translate one by one.
Premises:
1.Text:People are either interested in puzzles or bad at chess.
Predicates:
Puzzles(x),BadChess(x)
Fol:∀x (Puzzles(x) ∨ BadChess(x))
2.Text:If a person is bad at chess, then they don't play a lot of chess.
Predicates:
BadChess(x),PlaysLots(x)
Fol:∀x (BadChess(x) → ¬PlaysLots(x))
3.Text:A person is either a planner or a creative person.
Predicates:
Plans(x),Creative(x)
Fol:∀x (Plans(x) ∨ Creative(x))
4.Text:Erica is someone who plays a lot of chess.
Predicates:
PlaysLots(x)
Constants:
erica
Fol:PlaysLots(erica)
5.Text:If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.
Predicates:
Creative(x),BadChess(x),Plans(x)
Constants:
erica
Fol:¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))
Conclusion:
Text:Erica plans.
Predicates:
Plans(x)
Constants:
erica
Fol:Plans(erica)"
"Premises:
1.All cats are cute.
2.Ghosts do not exist.
3.An animal is either a cat or a dog.
4.Nothing that barks is lovely.
5.If something is a dog, then it barks.
6.Grace is either a cat and a dog, or neither a cat nor a dog.

Conclusion:
If Grace is either both cute and lovely, or neither cute nor lovely, then Grace is either a dog or a ghost.","We can get these predicates:
Cat(x),Cute(x),Ghost(x),Dog(x),Bark(x),Lovely(x)
We can get these constants:
grace
Let's translate one by one.
Premises:
1.Text:All cats are cute.
Predicates:
Cat(x),Cute(x)
Fol:∀x (Cat(x) → Cute(x))
2.Text:Ghosts do not exist.
Predicates:
Ghost(x)
Fol:∀x (¬Ghost(x))
3.Text:An animal is either a cat or a dog.
Predicates:
Cat(x),Dog(x)
Fol:∀x (Cat(x) ∨ Dog(x))
4.Text:Nothing that barks is lovely.
Predicates:
Bark(x),Lovely(x)
Fol:∀x (Bark(x) → ¬Lovely(x))
5.Text:If something is a dog, then it barks.
Predicates:
Bark(x),Dog(x)
Fol:∀x (Dog(x) → Bark(x))
6.Text:Grace is either a cat and a dog, or neither a cat nor a dog.
Predicates:
Cat(x),Dog(x)
Constants:
grace
Fol:(Cat(grace) ∧ Dog(grace)) ⊕ (¬Cat(grace) ∧ ¬Dog(grace))
Conclusion:
Text:If Grace is either both cute and lovely, or neither cute nor lovely, then Grace is either a dog or a ghost.
Predicates:
Dog(x),Lovely(x),Ghost(x),Cute(x)
Constants:
grace
Fol:((Cute(grace) ∧ Lovely(grace)) ⊕ (¬Cute(grace) ∧ ¬Lovely(grace))) → (Dog(grace) ∨ Ghost(grace))"
"Premises:
1.Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.
2.Herodicus was born in the city of Selymbria.
3.Selymbria is a colony of the city-state Megara.
4.One of the tutors of Hippocrates was Herodicus.
5.Massages were recommended by Herodicus.
6.Some of theories of Herodicus are considered to be the foundation of sports medicine.

Conclusion:
Herodicus did not recommend massages.","We can get these predicates:
Greek(x),Physician(x),Dietician(x),Sophist(x),GymnasticMaster(x),Born(x,y),City(x),Colony(x,y),CityState(x),Tutored(x,y),Recommended(x,y),Theory(x),From(x,y),FoundationOf(x,y)
We can get these constants:
sportsMedicine,herodicus
Let's translate one by one.
Premises:
1.Text:Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.
Predicates:
Sophist(x),Physician(x),GymnasticMaster(x),Greek(x),Dietician(x)
Constants:
herodicus
Fol:Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)
2.Text:Herodicus was born in the city of Selymbria.
Predicates:
Born(x,y),City(x)
Constants:
selymbia,herodicus
Fol:Born(herodicus, selymbia) ∧ City(selymbia)
3.Text:Selymbria is a colony of the city-state Megara.
Predicates:
CityState(x),Colony(x,y)
Constants:
selymbia,megara
Fol:Colony(selymbia, megara) ∧ CityState(megara)
4.Text:One of the tutors of Hippocrates was Herodicus.
Predicates:
Tutored(x,y)
Constants:
hippocrates,herodicus
Fol:Tutored(herodicus, hippocrates)
5.Text:Massages were recommended by Herodicus.
Predicates:
Recommended(x,y)
Constants:
herodicus,massages
Fol:Recommended(herodicus, massages)
6.Text:Some of theories of Herodicus are considered to be the foundation of sports medicine.
Predicates:
FoundationOf(x,y),Theory(x),From(x,y)
Constants:
herodicus,sportsMedicine
Fol:∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))
Conclusion:
Text:Herodicus did not recommend massages.
Predicates:
Recommended(x,y)
Constants:
herodicus,massages
Fol:¬Recommended(herodicus, massages)"
"Premises:
1.China is one of BRICS and its economy is emerging.
2.India is one of BRICS and its economy is emerging.
3.All people from China speak Chinese.
4.All people from India speak Hindi or English.
5.There is an Indian.

Conclusion:
All people from BRICS neither speak Hindi nor speak English.","We can get these predicates:
China(x),BRICS(x),EmergingEconomy(x),India(x),From(x,y),Speak(x,y)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:China is one of BRICS and its economy is emerging.
Predicates:
BRICS(x),EmergingEconomy(x),China(x)
Fol:∀x (China(x) → BRICS(x) ∧ EmergingEconomy(x))
2.Text:India is one of BRICS and its economy is emerging.
Predicates:
EmergingEconomy(x),BRICS(x),India(x)
Fol:∀x (India(x) → BRICS(x) ∧ EmergingEconomy(x))
3.Text:All people from China speak Chinese.
Predicates:
Speak(x,y),From(x,y),China(x)
Constants:
chinese
Fol:∀x ∀y (From(x, y) ∧ China(y) → Speak(x, chinese))
4.Text:All people from India speak Hindi or English.
Predicates:
Speak(x,y),From(x,y),India(x)
Constants:
hindi,english
Fol:∀x ∀y (From(x, y) ∧ India(y) → Speak(x, hindi) ∨ Speak(x, english))
5.Text:There is an Indian.
Predicates:
From(x,y),India(x)
Fol:∃x ∃y (From(x, y) ∧ India(y))
Conclusion:
Text:All people from BRICS neither speak Hindi nor speak English.
Predicates:
Speak(x,y),BRICS(x),From(x,y)
Constants:
hindi,english
Fol:∀x ∀y (From(x, y) ∧ BRICS(y) → ¬Speak(x, hindi) ∧ ¬Speak(x, english))"
"Premises:
1.All young working professionals who have regular 9-5 jobs also have pets.
2.Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.
3.All people who have pets are people who have at least one child.
4.People who do not have at least one child are people who own a sports car.
5.Mary either does not own a sports car or, if they do, then they do not have at least one child.

Conclusion:
If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.","We can get these predicates:
Working(x),Pets(x),Manhattan(x),Child(x),Car(x)
We can get these constants:
mary
Let's translate one by one.
Premises:
1.Text:All young working professionals who have regular 9-5 jobs also have pets.
Predicates:
Pets(x),Working(x)
Fol:∀x (Working(x) → Pets(x))
2.Text:Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.
Predicates:
Working(x),Manhattan(x)
Fol:∃x (Manhattan(x) ∧ Working(x))
3.Text:All people who have pets are people who have at least one child.
Predicates:
Pets(x),Child(x)
Fol:∀x (Pets(x) → Child(x))
4.Text:People who do not have at least one child are people who own a sports car.
Predicates:
Child(x),Car(x)
Fol:∀x (Child(x) → ¬Car(x))
5.Text:Mary either does not own a sports car or, if they do, then they do not have at least one child.
Predicates:
Child(x),Car(x)
Constants:
mary
Fol:¬(Car(mary) ⊕ Child(mary))
Conclusion:
Text:If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.
Predicates:
Manhattan(x),Working(x)
Constants:
mary
Fol:Working(mary) → ¬Manhattan(mary)"
"Premises:
1.Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.
2.Ann J. Land ran unopposed for the Philadephia City Council in 1980.
3.People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.
4.Michael Nutter was a political challenger.
5.Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.

Conclusion:
Ann J. Land was elected to the Philadelphia City Council in 1987.","We can get these predicates:
PhiladephiaCouncil(x),DemocraticParty(x),Year(x),RunFor(x),Elected(x),Challenger(x),Defeated(x,y)
We can get these constants:
nutter,annJLand
Let's translate one by one.
Premises:
1.Text:Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.
Predicates:
PhiladephiaCouncil(x),DemocraticParty(x)
Constants:
annJLand
Fol:PhiladephiaCouncil(annJLand) ∧ DemocraticParty(annJLand)
2.Text:Ann J. Land ran unopposed for the Philadephia City Council in 1980.
Predicates:
PhiladephiaCouncil(x),Year(x),RunFor(x)
Constants:
annJLand
Fol:Year(y1980) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand)
3.Text:People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.
Predicates:
PhiladephiaCouncil(x),Elected(x),RunFor(x)
Fol:∀x (RunFor(x) ∧ PhiladephiaCouncil(x) → Elected(x))
4.Text:Michael Nutter was a political challenger.
Predicates:
Challenger(x)
Constants:
nutter
Fol:Challenger(nutter)
5.Text:Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.
Predicates:
PhiladephiaCouncil(x),Defeated(x,y),Year(x),RunFor(x)
Constants:
nutter,annJLand
Fol:Year(y1987) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand) ∧ Defeated(annJLand, nutter)
Conclusion:
Text:Ann J. Land was elected to the Philadelphia City Council in 1987.
Predicates:
Year(x),Elected(x)
Constants:
annJLand
Fol:Year(y1987) → Elected(annJLand)"
"Premises:
1.If the game has sold more than 1 million copies, then it is on the Best Seller list.
2.All Games developed by Paradox Development Studio sold more than 1 million copies.
3.Some games published before 2010 support the Linux OS system.
4.All games on the Best Seller list are popular among young people.
5.FIFA22 neither supports the Linux OS system nor is it popular among young people.

Conclusion:
FIFA21 is published before 2010 and developed by Paradox Development Studio","We can get these predicates:
SoldMillion(x),BestSeller(x),DevelopedByParadox(x),PublishedBefore2010(x),SupportLinuxSystem(x),Popular(x)
We can get these constants:
fifa21
Let's translate one by one.
Premises:
1.Text:If the game has sold more than 1 million copies, then it is on the Best Seller list.
Predicates:
SoldMillion(x),BestSeller(x)
Fol:∀x (SoldMillion(x) → BestSeller(x))
2.Text:All Games developed by Paradox Development Studio sold more than 1 million copies.
Predicates:
SoldMillion(x),DevelopedByParadox(x)
Fol:∀x (DevelopedByParadox(x) → SoldMillion(x))
3.Text:Some games published before 2010 support the Linux OS system.
Predicates:
PublishedBefore2010(x),SupportLinuxSystem(x)
Fol:∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))
4.Text:All games on the Best Seller list are popular among young people.
Predicates:
Popular(x),BestSeller(x)
Fol:∀x (BestSeller(x) → Popular(x))
5.Text:FIFA22 neither supports the Linux OS system nor is it popular among young people.
Predicates:
Popular(x),SupportLinuxSystem(x)
Constants:
fifa21
Fol:¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))
Conclusion:
Text:FIFA21 is published before 2010 and developed by Paradox Development Studio
Predicates:
DevelopedByParadox(x),PublishedBefore2010(x)
Constants:
fifa21
Fol:PublishedBefore2010(fifa21) ∧ DevelopedByParadox(fifa21)"
"Premises:
1.Daveed Diggs is an actor and film producer.
2.Daveed Diggs played two roles in the musical Hamilton.
3.One of the actors from Hamilton won the best actor award.
4.The actor playing Thomas Jefferson won the best actor award.
5.Daveed Diggs played Thomas Jefferson.
6.Musicals are not films.

Conclusion:
Hamilton is a film.","We can get these predicates:
Actor(x),FilmProducer(x),PlayedTwoRoles(x),PlayedIn(x,y),Musical(x),WonBestActorAward(x),Played(x,y),Film(x)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:Daveed Diggs is an actor and film producer.
Predicates:
FilmProducer(x),Actor(x)
Constants:
daveedDiggs
Fol:Actor(daveedDiggs) ∧ FilmProducer(daveedDiggs)
2.Text:Daveed Diggs played two roles in the musical Hamilton.
Predicates:
Musical(x),PlayedTwoRoles(x),PlayedIn(x,y)
Constants:
hamilton,daveedDiggs
Fol:PlayedTwoRoles(daveedDiggs) ∧ PlayedIn(daveedDiggs, hamilton) ∧ Musical(hamilton)
3.Text:One of the actors from Hamilton won the best actor award.
Predicates:
PlayedIn(x,y),Actor(x),WonBestActorAward(x)
Constants:
hamilton
Fol:∃x (Actor(x) ∧ PlayedIn(x, hamilton) ∧ WonBestActorAward(x))
4.Text:The actor playing Thomas Jefferson won the best actor award.
Predicates:
Played(x,y),Actor(x),WonBestActorAward(x)
Constants:
thomasJefferson
Fol:∀x (Actor(x) ∧ Played(x, thomasJefferson) → WonBestActorAward(x))
5.Text:Daveed Diggs played Thomas Jefferson.
Predicates:
Played(x,y)
Constants:
daveedDiggs,thomasJefferson
Fol:Played(daveedDiggs, thomasJefferson)
6.Text:Musicals are not films.
Predicates:
Musical(x),Film(x)
Fol:∀x (Musical(x) → ¬Film(x))
Conclusion:
Text:Hamilton is a film.
Predicates:
Film(x)
Constants:
hamilton
Fol:Film(hamilton)"
"Premises:
1.The PlayStation EyeToy is a camera accessory for the Playstation 2.
2.The PlayStation Eye is a camera accessory for the Playstation 3.
3.The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.
4.Camera accessory for the system is compatible with that system
5.Only the Playstation Camera is compatible with more than one system.

Conclusion:
The Playstation EyeToy is compatible with the Playstation 2.","We can get these predicates:
Accessory(x,y),Compatible(x,y)
We can get these constants:
ps5,pseyetoy,ps3,ps2,pseye,ps4
Let's translate one by one.
Premises:
1.Text:The PlayStation EyeToy is a camera accessory for the Playstation 2.
Predicates:
Accessory(x,y)
Constants:
ps2,pseyetoy
Fol:Accessory(pseyetoy, ps2)
2.Text:The PlayStation Eye is a camera accessory for the Playstation 3.
Predicates:
Accessory(x,y)
Constants:
ps3,pseye
Fol:Accessory(pseye, ps3)
3.Text:The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.
Predicates:
Accessory(x,y)
Constants:
ps4,pscamera,ps5
Fol:Accessory(pscamera, ps4) ∧ Accessory(pscamera, ps5)
4.Text:Camera accessory for the system is compatible with that system
Predicates:
Compatible(x,y),Accessory(x,y)
Fol:∀x ∀y (Accessory(x, y) → Compatible(x, y))
5.Text:Only the Playstation Camera is compatible with more than one system.
Predicates:
Compatible(x,y)
Constants:
ps5,ps4,ps2,pseye,ps3,pseyetoy
Fol:¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5)
Conclusion:
Text:The Playstation EyeToy is compatible with the Playstation 2.
Predicates:
Compatible(x,y)
Constants:
ps2,pseyetoy
Fol:Compatible(pseyetoy, ps2)"
"Premises:
1.A cutman is responsible for preventing and treating physical damage to a fighter.
2.Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout.
3.Cutmen typically handle swelling, nosebleeds and lacerations.
4.Jack is a cutman.

Conclusion:
Jack can treat physical damage.","We can get these predicates:
Cutman(x),Prevent(x,y),Treat(x,y),Appear(x,y),Handle(x,y)
We can get these constants:
jack
Let's translate one by one.
Premises:
1.Text:A cutman is responsible for preventing and treating physical damage to a fighter.
Predicates:
Prevent(x,y),Cutman(x),Treat(x,y)
Constants:
physicalDamage
Fol:∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))
2.Text:Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout.
Predicates:
Cutman(x),Appear(x,y)
Constants:
mixedMartialBout,boxing,kickboxing
Fol:∀x (Cutman(x) → Appear(x, boxing) ∨ Appear(x, kickboxing) ∨ Appear(x, mixedMartialBout))
3.Text:Cutmen typically handle swelling, nosebleeds and lacerations.
Predicates:
Handle(x,y),Cutman(x)
Constants:
lacerations,nosebleeds,swelling
Fol:∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleeds) ∧ Handle(x, lacerations))
4.Text:Jack is a cutman.
Predicates:
Cutman(x)
Constants:
jack
Fol:Cutman(jack)
Conclusion:
Text:Jack can treat physical damage.
Predicates:
Treat(x,y)
Constants:
jack,physicalDamage
Fol:Treat(jack, physicalDamage)"
"Premises:
1.All professors are teachers.
2.All researchers are professors.
3.No teachers are students.
4.All people who study are students.
5.Leon is not studying or a researcher.
6.If Leon is not studying, then Leon is a teacher.

Conclusion:
If Leon is not a researcher, then Leon is a student.","We can get these predicates:
Professor(x),Teacher(x),Researcher(x),Student(x),Study(x)
We can get these constants:
leon
Let's translate one by one.
Premises:
1.Text:All professors are teachers.
Predicates:
Teacher(x),Professor(x)
Fol:∀x (Professor(x) → Teacher(x))
2.Text:All researchers are professors.
Predicates:
Professor(x),Researcher(x)
Fol:∀x (Researcher(x) → Professor(x))
3.Text:No teachers are students.
Predicates:
Teacher(x),Student(x)
Fol:∀x (Teacher(x) → ¬Student(x))
4.Text:All people who study are students.
Predicates:
Student(x),Study(x)
Fol:∀x (Study(x) → Student(x))
5.Text:Leon is not studying or a researcher.
Predicates:
Researcher(x),Study(x)
Constants:
leon
Fol:¬Study(leon) ⊕ Researcher(leon)
6.Text:If Leon is not studying, then Leon is a teacher.
Predicates:
Teacher(x),Study(x)
Constants:
leon
Fol:¬Study(leon) → Teacher(leon)
Conclusion:
Text:If Leon is not a researcher, then Leon is a student.
Predicates:
Researcher(x),Student(x)
Constants:
leon
Fol:¬Researcher(leon) → Student(leon)"
"Premises:
1.Diethylcarbamazine is a medication discovered in the year 1947.
2.Diethylcarbamazine can be used to treat river blindness.
3.The only preferred treatment for river blindness is ivermectin.
4.Diethylcarbamazine is not ivermectin.

Conclusion:
Diethylcarbamazine was often used to treat river blindness.","We can get these predicates:
Diethylcarbamazine(x),Medication(x),DiscoveredIn(x,y),RiverBlindness(x),Treats(x,y),PreferredTreatment(x,y),Ivermectin(x),OftenUsedToTreat(x,y)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:Diethylcarbamazine is a medication discovered in the year 1947.
Predicates:
Diethylcarbamazine(x),Medication(x),DiscoveredIn(x,y)
Fol:∀x (Diethylcarbamazine(x) ∧ Medication(x) ∧ DiscoveredIn(x, year1947))
2.Text:Diethylcarbamazine can be used to treat river blindness.
Predicates:
RiverBlindness(x),Treats(x,y),Diethylcarbamazine(x)
Fol:∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))
3.Text:The only preferred treatment for river blindness is ivermectin.
Predicates:
RiverBlindness(x),PreferredTreatment(x,y),Ivermectin(x)
Fol:∀x ∀y (RiverBlindness(y) ∧ PreferredTreatment(x, y) → Ivermectin(x))
4.Text:Diethylcarbamazine is not ivermectin.
Predicates:
Ivermectin(x),Diethylcarbamazine(x)
Fol:∀x (Diethylcarbamazine(x) → ¬Ivermectin(x))
Conclusion:
Text:Diethylcarbamazine was often used to treat river blindness.
Predicates:
RiverBlindness(x),Diethylcarbamazine(x),OftenUsedToTreat(x,y)
Fol:∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → OftenUsedToTreat(x, y))"
"Premises:
1.All univariate analyses use a generalized linear model.
2.All multivoxel (pattern) analyses are implementing machine learning algorithms.
3.All implementing machine learning algorithms are to learn and classify multivariate data.
4.The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis.
5.If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis.

Conclusion:
Latent Dirichlet allocation model uses a generalized linear model and learns and classifies multivariate data.","We can get these predicates:
UnivariateAnalysis(x),UsesGeneralizedLinearModel(x),MultivoxelPatternAnalysis(x),ImplementingMachineLearningAlgorithms(x),LearnAndClassifyMultivariateData(x)
We can get these constants:
latentDirichletAllocationModel
Let's translate one by one.
Premises:
1.Text:All univariate analyses use a generalized linear model.
Predicates:
UsesGeneralizedLinearModel(x),UnivariateAnalysis(x)
Fol:∀x (UnivariateAnalysis(x) → UsesGeneralizedLinearModel(x))
2.Text:All multivoxel (pattern) analyses are implementing machine learning algorithms.
Predicates:
ImplementingMachineLearningAlgorithms(x),MultivoxelPatternAnalysis(x)
Fol: ∀x (MultivoxelPatternAnalysis(x) → ImplementingMachineLearningAlgorithms(x))
3.Text:All implementing machine learning algorithms are to learn and classify multivariate data.
Predicates:
LearnAndClassifyMultivariateData(x),ImplementingMachineLearningAlgorithms(x)
Fol: ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x))
4.Text:The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis.
Predicates:
UsesGeneralizedLinearModel(x),UnivariateAnalysis(x)
Constants:
latentDirichletAllocationModel
Fol: UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∨ UnivariateAnalysis(latentDirichletAllocationModel)
5.Text:If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis.
Predicates:
UsesGeneralizedLinearModel(x),LearnAndClassifyMultivariateData(x),MultivoxelPatternAnalysis(x)
Constants:
latentDirichletAllocationModel
Fol: ¬LearnAndClassifyMultivariateData(latentDirichletAllocationModel) → UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ MultivoxelPatternAnalysis(latentDirichletAllocationModel)
Conclusion:
Text:Latent Dirichlet allocation model uses a generalized linear model and learns and classifies multivariate data.
Predicates:
UsesGeneralizedLinearModel(x),LearnAndClassifyMultivariateData(x)
Constants:
latentDirichletAllocationModel
Fol:UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ LearnAndClassifyMultivariateData(latentDirichletAllocationModel)"
"Premises:
1.If people own at least one pet, then they do not have tidy houses.
2.If people grew up with childhood pets, then they own at least one pet.
3.If people hire a maid or cleaning service, then they have tidy houses.
4.If people live in the suburbs, then they have tidy houses.
5.Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.

Conclusion:
Jack lives in the suburbs.","We can get these predicates:
OwnPet(x),TidyHouse(x),ChildhoodPet(x),HireCleaning(x),Suburbs(x)
We can get these constants:
jack
Let's translate one by one.
Premises:
1.Text:If people own at least one pet, then they do not have tidy houses.
Predicates:
OwnPet(x),TidyHouse(x)
Fol:∀x (OwnPet(x) → ¬TidyHouse(x))
2.Text:If people grew up with childhood pets, then they own at least one pet.
Predicates:
OwnPet(x),ChildhoodPet(x)
Fol:∀x (ChildhoodPet(x) → OwnPet(x))
3.Text:If people hire a maid or cleaning service, then they have tidy houses.
Predicates:
HireCleaning(x),TidyHouse(x)
Fol:∀x (HireCleaning(x) → TidyHouse(x))
4.Text:If people live in the suburbs, then they have tidy houses.
Predicates:
Suburbs(x),ChildhoodPet(x)
Fol:∀x (Suburbs(x) → ChildhoodPet(x))
5.Text:Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.
Predicates:
OwnPet(x),HireCleaning(x)
Constants:
jack
Fol:¬(HireCleaning(jack) ⊕ OwnPet(jack))
Conclusion:
Text:Jack lives in the suburbs.
Predicates:
Suburbs(x)
Constants:
jack
Fol:Suburbs(jack)"
"Premises:
1.The indie pop band Phoenix has released 6 albums.
2.Phoenix's album ""Wolfgang Amadeus Phoenix"" sold over 500,000 copies.
3.A certified gold album or single is one which sold over half a million copies.
4.""1901"" is a single from Phoenix's album ""Wolfgang Amadeus Phoenix.""
5.Over 400,000 copies of ""1901"" have been sold.

Conclusion:
The album ""Wolfgang Amadeus Phoenix"" is a certified gold album.","We can get these predicates:
AlbumsReleased(x,y),Album(x),IsAlbumOf(x,y),SoldOver(x,y),Single(x),CertifiedGold(x),From(x,y),By(x,y)
We can get these constants:
l400000,l1901
Let's translate one by one.
Premises:
1.Text:The indie pop band Phoenix has released 6 albums.
Predicates:
AlbumsReleased(x,y)
Constants:
l6,phoenix
Fol:AlbumsReleased(phoenix, l6)
2.Text:Phoenix's album ""Wolfgang Amadeus Phoenix"" sold over 500,000 copies.
Predicates:
SoldOver(x,y),Album(x),IsAlbumOf(x,y)
Constants:
l500000,wolfgangamadeusphoenix,phoenix
Fol:Album(wolfgangamadeusphoenix) ∧ IsAlbumOf(wolfgangamadeusphoenix, phoenix) ∧ SoldOver(wolfgangamadeusphoenix, l500000)
3.Text:A certified gold album or single is one which sold over half a million copies.
Predicates:
SoldOver(x,y),Album(x),Single(x),CertifiedGold(x)
Constants:
l500000
Fol:∀x ((Album(x) ∨ Single(x)) ∧ SoldOver(x, l500000) → CertifiedGold(x))
4.Text:""1901"" is a single from Phoenix's album ""Wolfgang Amadeus Phoenix.""
Predicates:
Single(x),By(x,y),From(x,y)
Constants:
l1901,wolfgangamadeusphoenix,phoenix
Fol:Single(l1901) ∧ From(l1901, wolfgangamadeusphoenix) ∧ By(l1901, phoenix)
5.Text:Over 400,000 copies of ""1901"" have been sold.
Predicates:
SoldOver(x,y)
Constants:
l400000,l1901
Fol:SoldOver(l1901, l400000)
Conclusion:
Text:The album ""Wolfgang Amadeus Phoenix"" is a certified gold album.
Predicates:
CertifiedGold(x)
Constants:
wolfgangamadeusphoenix
Fol:CertifiedGold(wolfgangamadeusphoenix)"
"Premises:
1.If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.
2.If two soccer teams score the same number of goals in one UCL final during both the regular time and extra time, they need to play the penalty shoot-out.
3.Real Madrid and Atlético Madrid both scored one goal in 2016 UCL final during the regular time.
4.Real Madrid and Atlético Madrid both scored zero goals in 2016 UCL final during the extra time.

Conclusion:
Real Madrid and Atlético Madrid needed to play a penalty shoot-out in 2016 UCL final.","We can get these predicates:
SoccerTeam(x),SameScore(x,y),During(x),PlayExtra(x,y),PlayPenalty(x,y)
We can get these constants:
atleticoMadrid,realMadrid,extraTime
Let's translate one by one.
Premises:
1.Text:If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.
Predicates:
During(x),SoccerTeam(x),PlayExtra(x,y),SameScore(x,y)
Constants:
regularTime
Fol:∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) → PlayExtra(x, y))
2.Text:If two soccer teams score the same number of goals in one UCL final during both the regular time and extra time, they need to play the penalty shoot-out.
Predicates:
During(x),PlayPenalty(x,y),SoccerTeam(x),SameScore(x,y)
Constants:
extraTime,regularTime
Fol:∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) ∧ During(extraTime) → PlayPenalty(x, y))
3.Text:Real Madrid and Atlético Madrid both scored one goal in 2016 UCL final during the regular time.
Predicates:
During(x),SoccerTeam(x),SameScore(x,y)
Constants:
realMadrid,atleticoMadrid,regularTime
Fol:SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(regularTime)
4.Text:Real Madrid and Atlético Madrid both scored zero goals in 2016 UCL final during the extra time.
Predicates:
During(x),SoccerTeam(x),SameScore(x,y)
Constants:
realMadrid,extraTime,atleticoMadrid
Fol:SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime)
Conclusion:
Text:Real Madrid and Atlético Madrid needed to play a penalty shoot-out in 2016 UCL final.
Predicates:
PlayPenalty(x,y)
Constants:
realMadrid,atleticoMadrid
Fol:PlayPenalty(realMadrid, atleticoMadrid)"
"Premises:
1.""Your Woman"" is a song by British one-man band White Town.
2.""Your Woman"" song peaked at No. 1 on the UK Singles Chart.
3.If a song peaked at No.1 at a cetain place, then it was extremely popular.
4.""Your Woman"" also peaked No. 1 in Iceland, Israel and Spain.

Conclusion:
White Town did not produce any popular song.","We can get these predicates:
Produce(x,y),Peak(x,y),Popular(x)
We can get these constants:
iceland,isarel,spain
Let's translate one by one.
Premises:
1.Text:""Your Woman"" is a song by British one-man band White Town.
Predicates:
Produce(x,y)
Constants:
whiteTown
Fol:Produce(whiteTown, yourWoman)
2.Text:""Your Woman"" song peaked at No. 1 on the UK Singles Chart.
Predicates:
Peak(x,y)
Constants:
uKSinglesChart
Fol:Peak(yourWoman, uKSinglesChart)
3.Text:If a song peaked at No.1 at a cetain place, then it was extremely popular.
Predicates:
Peak(x,y),Popular(x)
Fol:∀x ∀y (Peak(x, y) → Popular(x))
4.Text:""Your Woman"" also peaked No. 1 in Iceland, Israel and Spain.
Predicates:
Peak(x,y)
Constants:
isarel,spain,iceland
Fol:Peak(yourWoman, iceland) ∧ Peak(yourWoman, isarel) ∧ Peak(yourWoman, spain)
Conclusion:
Text:White Town did not produce any popular song.
Predicates:
Produce(x,y),Popular(x)
Constants:
whiteTown
Fol:¬∃x (Produce(whiteTown, x) ∧ Popular(x))"
"Premises:
1.Either Max listens to classical music or Max listens to rap.
2.All the songs that Max listens to that are classical music are from the 12th century.
3.If the song Max listens to is rap, then the song is from Kanye West.
4.If a songs is from Kanye West, then the song is full of lyrics.
5.All songs that are full of lyrics need to be written with words
6.If “As it was” by Harry Styles is classical music that Max listens to or  from the 12th century, then “As it was” by Harry Styles is either classical music that Max listens to, or the songs are from 12th century.

Conclusion:
“As it was” by Harry Styles needs to be written with words.","We can get these predicates:
MaxListensToClassicalMusic(x),MaxListensToRap(x),SongsFrom12thCentury(x),SongsFromKanyeWest(x),SongsFullOfLyrics(x),NeedToBeWrittenWithWords(x)
We can get these constants:
asItWasByHarryStyles
Let's translate one by one.
Premises:
1.Text:Either Max listens to classical music or Max listens to rap.
Predicates:
MaxListensToClassicalMusic(x),MaxListensToRap(x)
Fol:∀x (MaxListensToClassicalMusic(x) ∨ MaxListensToRap(x))
2.Text:All the songs that Max listens to that are classical music are from the 12th century.
Predicates:
MaxListensToClassicalMusic(x),SongsFrom12thCentury(x)
Fol:∀x (MaxListensToClassicalMusic(x) → SongsFrom12thCentury(x))
3.Text:If the song Max listens to is rap, then the song is from Kanye West.
Predicates:
MaxListensToRap(x),SongsFromKanyeWest(x)
Fol:∀x (MaxListensToRap(x) → SongsFromKanyeWest(x))
4.Text:If a songs is from Kanye West, then the song is full of lyrics.
Predicates:
SongsFullOfLyrics(x),SongsFromKanyeWest(x)
Fol:∀x (SongsFromKanyeWest(x) → SongsFullOfLyrics(x))
5.Text:All songs that are full of lyrics need to be written with words
Predicates:
SongsFullOfLyrics(x),NeedToBeWrittenWithWords(x)
Fol:∀x (SongsFullOfLyrics(x) → NeedToBeWrittenWithWords(x))
6.Text:If “As it was” by Harry Styles is classical music that Max listens to or  from the 12th century, then “As it was” by Harry Styles is either classical music that Max listens to, or the songs are from 12th century.
Predicates:
MaxListensToClassicalMusic(x),SongsFrom12thCentury(x)
Constants:
asItWasByHarryStyles
Fol:MaxListensToClassicalMusic(asItWasByHarryStyles) ∨ SongsFrom12thCentury(asItWasByHarryStyles) → MaxListensToClassicalMusic(asItWasByHarryStyles) ⊕ SongsFrom12thCentury(asItWasByHarryStyles)
Conclusion:
Text:“As it was” by Harry Styles needs to be written with words.
Predicates:
NeedToBeWrittenWithWords(x)
Constants:
asItWasByHarryStyles
Fol:NeedToBeWrittenWithWords(asItWasByHarryStyles)"
"Premises:
1.All people who limp often and regularly have long-term medical issues with underlying causes.
2.If people have long-term medical issues with underlying causes, then they are not often spry and energetic.
3.People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.
4.If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.
5.If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities.

Conclusion:
Mark visits the gym at least once a day.","We can get these predicates:
Limp(x),Medical(x),Spry(x),Tired(x),Indoors(x),Gym(x)
We can get these constants:
Mark
Let's translate one by one.
Premises:
1.Text:All people who limp often and regularly have long-term medical issues with underlying causes.
Predicates:
Medical(x),Limp(x)
Fol:∀x (Limp(x) → Medical(x))
2.Text:If people have long-term medical issues with underlying causes, then they are not often spry and energetic.
Predicates:
Spry(x),Medical(x)
Fol:∀x (Medical(x) → ¬Spry(x))
3.Text:People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.
Predicates:
Tired(x),Spry(x),Indoors(x)
Fol:∀x (Spry(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → Indoors(x)))
4.Text:If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.
Predicates:
Gym(x),Indoors(x)
Fol:∀x (Indoors(x) → ¬Gym(x))
5.Text:If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities.
Predicates:
Tired(x),Spry(x),Limp(x)
Constants:
Mark
Fol:(Limp(Mark) ⊕ Spry(Mark)) → Limp(Mark) ∨ Tired(Mark)
Conclusion:
Text:Mark visits the gym at least once a day.
Predicates:
Gym(x)
Constants:
Mark
Fol:Gym(Mark)"
"Premises:
1.All books written by Tomas have sold more than 1 million copies.
2.Some books that have won Hugo Awards are written by Tomas.
3.All books about the future are inspired by Shakespeare.
4.2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.
5.2001 is a book that has either sold more than 1 million copies or it was written by Tomas.

Conclusion:
2001 is a book that has won a Hugo Award and is about the future.","We can get these predicates:
WrittenByTomas(x),SoldOneMillion(x),WinningHugoAward(x),AboutFuture(x),InspiredFromShakespeare(x)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:All books written by Tomas have sold more than 1 million copies.
Predicates:
SoldOneMillion(x),WrittenByTomas(x)
Fol:∀x (WrittenByTomas(x) → SoldOneMillion(x))
2.Text:Some books that have won Hugo Awards are written by Tomas.
Predicates:
WinningHugoAward(x),WrittenByTomas(x)
Fol:∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))
3.Text:All books about the future are inspired by Shakespeare.
Predicates:
InspiredFromShakespeare(x),AboutFuture(x)
Fol:∀x (AboutFuture(x) → InspiredFromShakespeare(x))
4.Text:2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.
Predicates:
SoldOneMillion(x),InspiredFromShakespeare(x)
Fol:InspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001)
5.Text:2001 is a book that has either sold more than 1 million copies or it was written by Tomas.
Predicates:
SoldOneMillion(x),WrittenByTomas(x)
Fol:SoldOneMillion(y2001) ⊕ WrittenByTomas(y2001)
Conclusion:
Text:2001 is a book that has won a Hugo Award and is about the future.
Predicates:
WinningHugoAward(x),AboutFuture(x)
Fol:WinningHugoAward(y2001) ∧ AboutFuture(y2001)"
"Premises:
1.No faculty does homework.
2.All students do homework.
3.All kids are students.
4.If someone works at a school, then they are faculty.
5.If Jill works at a school or is a teacher, then Jill works at a school.

Conclusion:
Jill is a kid.","We can get these predicates:
Faculty(x),DoesHomework(x),Student(x),Kid(x),WorkAtSchool(x)
We can get these constants:
jill
Let's translate one by one.
Premises:
1.Text:No faculty does homework.
Predicates:
DoesHomework(x),Faculty(x)
Fol:∀x (Faculty(x) → ¬DoesHomework(x))
2.Text:All students do homework.
Predicates:
DoesHomework(x),Student(x)
Fol:∀x (Student(x) → DoesHomework(x))
3.Text:All kids are students.
Predicates:
Kid(x),Student(x)
Fol:∀x (Kid(x) → Student(x))
4.Text:If someone works at a school, then they are faculty.
Predicates:
WorkAtSchool(x),Faculty(x)
Fol:∀x (WorkAtSchool(x) → Faculty(x))
5.Text:If Jill works at a school or is a teacher, then Jill works at a school.
Predicates:
DoesHomework(x),WorkAtSchool(x)
Constants:
jill
Fol:WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)
Conclusion:
Text:Jill is a kid.
Predicates:
Kid(x)
Constants:
jill
Fol:Kid(jill)"
"Premises:
1.All devices belonging to the company are connected to Google Home.
2.All devices with the company logo belong to the company.
3.A device is either with the company logo or belongs to employees.
4.All devices belonging to employees are available to connect to the company's wifi.
5.All devices connected to Google Home are controlled by managers.
6.All devices that connect to the company's wifi are easy to operate.
7.All devices that are easy to operate are produced after 2020.
8.IPod1 is produced before 2020.

Conclusion:
IPod1 is controlled by managers.","We can get these predicates:
InCompany(x),GoogleHome(x),CompanyLogo(x),Employee(x),Wifi(x),ControlledByManager(x),EasyToOperate(x),ProducedAfter2020(x)
We can get these constants:
iPod1
Let's translate one by one.
Premises:
1.Text:All devices belonging to the company are connected to Google Home.
Predicates:
InCompany(x),GoogleHome(x)
Fol:∀x (InCompany(x) → GoogleHome(x))
2.Text:All devices with the company logo belong to the company.
Predicates:
CompanyLogo(x),InCompany(x)
Fol:∀x (CompanyLogo(x) → InCompany(x))
3.Text:A device is either with the company logo or belongs to employees.
Predicates:
CompanyLogo(x),Employee(x)
Fol:∀x (CompanyLogo(x) ∨ Employee(x))
4.Text:All devices belonging to employees are available to connect to the company's wifi.
Predicates:
Wifi(x),Employee(x)
Fol:∀x (Employee(x) → Wifi(x))
5.Text:All devices connected to Google Home are controlled by managers.
Predicates:
ControlledByManager(x),GoogleHome(x)
Fol:∀x (GoogleHome(x) → ControlledByManager(x))
6.Text:All devices that connect to the company's wifi are easy to operate.
Predicates:
Wifi(x),EasyToOperate(x)
Fol:∀x (Wifi(x) → EasyToOperate(x))
7.Text:All devices that are easy to operate are produced after 2020.
Predicates:
EasyToOperate(x),ProducedAfter2020(x)
Fol:∀x (EasyToOperate(x) → ProducedAfter2020(x))
8.Text:IPod1 is produced before 2020.
Predicates:
ProducedAfter2020(x)
Constants:
iPod1
Fol:¬ProducedAfter2020(iPod1)
Conclusion:
Text:IPod1 is controlled by managers.
Predicates:
ControlledByManager(x)
Constants:
iPod1
Fol:ControlledByManager(iPod1)"
"Premises:
1.No payment cards issued by Russian banks can be used with ApplePay.
2.All MIR payment cards are issued by Russian banks.
3.Some international payment cards can be used with ApplePay.
4.Social payments in Russia can only be transferred to MIR payment cards.
5.Bank of America payment cards can be used with ApplePay.

Conclusion:
Bank of America payment cards are international and can be used to transfer social payments in Russia.","We can get these predicates:
RussianBank(x),ApplePay(x),Mir(x),International(x),SocialRussia(x)
We can get these constants:
boapaymentcards
Let's translate one by one.
Premises:
1.Text:No payment cards issued by Russian banks can be used with ApplePay.
Predicates:
RussianBank(x),ApplePay(x)
Fol:∀x (RussianBank(x) → ¬ApplePay(x))
2.Text:All MIR payment cards are issued by Russian banks.
Predicates:
Mir(x),RussianBank(x)
Fol:∀x (Mir(x) → RussianBank(x))
3.Text:Some international payment cards can be used with ApplePay.
Predicates:
ApplePay(x),International(x)
Fol:∃x (International(x) → ApplePay(x))
4.Text:Social payments in Russia can only be transferred to MIR payment cards.
Predicates:
Mir(x),SocialRussia(x)
Fol:∀x (SocialRussia(x) → Mir(x))
5.Text:Bank of America payment cards can be used with ApplePay.
Predicates:
ApplePay(x)
Constants:
boapaymentcards
Fol:ApplePay(boapaymentcards)
Conclusion:
Text:Bank of America payment cards are international and can be used to transfer social payments in Russia.
Predicates:
International(x),SocialRussia(x)
Constants:
boapaymentcards
Fol:International(boapaymentcards) ∧ SocialRussia(boapaymentcards)"
"Premises:
1.Maya will play violin if and only if she never injures her fingers.
2.Volleyball players can injure their ankle, fingers, or shoulder.
3.Maya is a volleyball player.

Conclusion:
Maya will not play violin.","We can get these predicates:
CanInjureFingures(x),WillPlayViolin(x),VolleyballPlayer(x)
We can get these constants:
maya
Let's translate one by one.
Premises:
1.Text:Maya will play violin if and only if she never injures her fingers.
Predicates:
CanInjureFingures(x),WillPlayViolin(x)
Constants:
maya
Fol:CanInjureFingures(maya) → ¬WillPlayViolin(maya)
2.Text:Volleyball players can injure their ankle, fingers, or shoulder.
Predicates:
VolleyballPlayer(x),CanInjureFingures(x)
Fol:∀x (VolleyballPlayer(x) → CanInjureFingures(x))
3.Text:Maya is a volleyball player.
Predicates:
VolleyballPlayer(x)
Constants:
maya
Fol:VolleyballPlayer(maya)
Conclusion:
Text:Maya will not play violin.
Predicates:
WillPlayViolin(x)
Constants:
maya
Fol:¬WillPlayViolin(maya)"
"Premises:
1.Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.
2.Carrozzeria Colli is a company that specialized in using aluminum.
3.The first automobiles built by Carrozzeria Colli were racing cars.
4.Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.
5.Carrozzeria Colli worked for airforces.
6.Carrozzeria Colli made car bodies.

Conclusion:
Carrozzeria Colli made car bodies in 1931.","We can get these predicates:
MilaneseCoachbuilderCompany(x),EstablishedBy(x,y),EstablishedIn(x,y),SpecializedIn(x,y),FirstAutomobilesBy(x,y),Racingcar(x),RacingCar(x),BuiltBy(x,y),Used(x,y),Airforce(x),WorkedFor(x,y),Made(x,y)
We can get these constants:
carrozzeriacolli,carbodies
Let's translate one by one.
Premises:
1.Text:Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.
Predicates:
MilaneseCoachbuilderCompany(x),EstablishedIn(x,y),EstablishedBy(x,y)
Constants:
carrozzeriacolli,giuseppecolli
Fol:MilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)
2.Text:Carrozzeria Colli is a company that specialized in using aluminum.
Predicates:
SpecializedIn(x,y)
Constants:
carrozzeriacolli,usingaluminum
Fol:SpecializedIn(carrozzeriacolli, usingaluminum)
3.Text:The first automobiles built by Carrozzeria Colli were racing cars.
Predicates:
Racingcar(x),FirstAutomobilesBy(x,y)
Constants:
carrozzeriacolli
Fol:∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x))
4.Text:Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.
Predicates:
RacingCar(x),Used(x,y),BuiltBy(x,y)
Constants:
carrozzeriacolli,fiat110mechanicals,chasis
Fol:∃x (RacingCar(x) ∧ BuiltBy(x, carrozzeriacolli) ∧ Used(x, fiat110mechanicals) ∧ Used(x, chasis))
5.Text:Carrozzeria Colli worked for airforces.
Predicates:
Airforce(x),WorkedFor(x,y)
Constants:
carrozzeriacolli
Fol:∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))
6.Text:Carrozzeria Colli made car bodies.
Predicates:
Made(x,y)
Constants:
carrozzeriacolli,carbodies
Fol:Made(carrozzeriacolli, carbodies)
Conclusion:
Text:Carrozzeria Colli made car bodies in 1931.
Predicates:
EstablishedIn(x,y),Made(x,y)
Constants:
carrozzeriacolli,carbodies
Fol:Made(carrozzeriacolli, carbodies) ∧ EstablishedIn(carrozzeriacolli, y1931)"
"Premises:
1.No video games released by Nintendo support the PS4 platform.
2.All video games in the Pokemon series are released by Nintendo.
3.All video games in the FIFA series support the PS4 platform.
4.All video games supporting users to simulate playing soccer games online are in the FIFA series.
5.The video game named “Be Lionel” is in the Pokemon series or supports users to simulate playing football games online.

Conclusion:
The video game named “Be Lionel” is not in the FIFA series or supports the PS4 platform.","We can get these predicates:
Nintendo(x),SupportPS4(x),Pokemon(x),FIFA(x),SoccerOnline(x)
We can get these constants:
belionel
Let's translate one by one.
Premises:
1.Text:No video games released by Nintendo support the PS4 platform.
Predicates:
SupportPS4(x),Nintendo(x)
Fol:∀x (Nintendo(x) → ¬SupportPS4(x))
2.Text:All video games in the Pokemon series are released by Nintendo.
Predicates:
Pokemon(x),Nintendo(x)
Fol:∀x (Pokemon(x) → Nintendo(x))
3.Text:All video games in the FIFA series support the PS4 platform.
Predicates:
SupportPS4(x),FIFA(x)
Fol:∀x (FIFA(x) → SupportPS4(x))
4.Text:All video games supporting users to simulate playing soccer games online are in the FIFA series.
Predicates:
FIFA(x),SoccerOnline(x)
Fol:∀x (SoccerOnline(x) → FIFA(x))
5.Text:The video game named “Be Lionel” is in the Pokemon series or supports users to simulate playing football games online.
Predicates:
Pokemon(x),SoccerOnline(x)
Constants:
belionel
Fol:Pokemon(belionel) ⊕ SoccerOnline(belionel)
Conclusion:
Text:The video game named “Be Lionel” is not in the FIFA series or supports the PS4 platform.
Predicates:
SupportPS4(x),FIFA(x)
Constants:
belionel
Fol:¬FIFA(belionel) ∨ SupportPS4(belionel)"
"Premises:
1.John will go to the cinema if and only if Jack goes to the cinema today.
2.Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.
3.Some days in March have bad weather.
4.Iron man is on.
5.It's March now.

Conclusion:
The weather is good today.","We can get these predicates:
GoToTheCinema(x,y),Movie(x),BadWeather(x),Month(x)
We can get these constants:
march
Let's translate one by one.
Premises:
1.Text:John will go to the cinema if and only if Jack goes to the cinema today.
Predicates:
GoToTheCinema(x,y)
Constants:
jack,today,john
Fol:GoToTheCinema(john, today) ↔ GoToTheCinema(jack, today)
2.Text:Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.
Predicates:
GoToTheCinema(x,y),BadWeather(x),Movie(x)
Constants:
ironman,today,jack
Fol:GoToTheCinema(jack, today) ↔ (Movie(ironman) ∧ ¬BadWeather(today))
3.Text:Some days in March have bad weather.
Predicates:
BadWeather(x),Month(x)
Constants:
march
Fol:∃x (Month(march) → BadWeather(x))
4.Text:Iron man is on.
Predicates:
Movie(x)
Constants:
ironman
Fol:Movie(ironman)
5.Text:It's March now.
Predicates:
Month(x)
Constants:
march
Fol:Month(march)
Conclusion:
Text:The weather is good today.
Predicates:
BadWeather(x)
Constants:
today
Fol:¬BadWeather(today)"
"Premises:
1.Customers either choose Plan A or Plan B.
2.All who choose Plan B are rewarded with a $30 gift card.
3.There are no customers who do not choose any plans.
4.No customers rewarded a $30 gift card are older than 80.
5.Customers are either older than 80 or are currently studying at school.
6.James is not a customer who is currently studying at school.

Conclusion:
James is a customer who chooses Plan A or does not choose any plans.","We can get these predicates:
PlanA(x),PlanB(x),Award(x),NoPlan(x),OlderThan80(x),StudyAtSchool(x)
We can get these constants:
james
Let's translate one by one.
Premises:
1.Text:Customers either choose Plan A or Plan B.
Predicates:
PlanA(x),PlanB(x)
Fol:∀x (PlanA(x) ∨ PlanB(x))
2.Text:All who choose Plan B are rewarded with a $30 gift card.
Predicates:
PlanB(x),Award(x)
Fol:∀x (PlanB(x) → Award(x))
3.Text:There are no customers who do not choose any plans.
Predicates:
NoPlan(x)
Fol:∀x (¬NoPlan(x))
4.Text:No customers rewarded a $30 gift card are older than 80.
Predicates:
Award(x),OlderThan80(x)
Fol:∀x (Award(x) → ¬OlderThan80(x))
5.Text:Customers are either older than 80 or are currently studying at school.
Predicates:
StudyAtSchool(x),OlderThan80(x)
Fol:∀x (OlderThan80(x) ∨ StudyAtSchool(x))
6.Text:James is not a customer who is currently studying at school.
Predicates:
StudyAtSchool(x)
Constants:
james
Fol:¬StudyAtSchool(james)
Conclusion:
Text:James is a customer who chooses Plan A or does not choose any plans.
Predicates:
PlanA(x),NoPlan(x)
Constants:
james
Fol:PlanA(james) ∨ NoPlan(james)"
"Premises:
1.If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.
2.If a city is in a state which is in US, the city is a US city.
3.If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.
4.The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).
5.LA is a city in California(CA).
6.Atlanta is a US city.
7.Atlanta is in Georgia(CA).
8.CA is a state in the United States.
9.Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.
10.Atlanta in the United States hold the 1996 Summer Olympics.

Conclusion:
The 2028 Summer Olympics will take place in the US.","We can get these predicates:
SummerOlympicsCity(x,y),CityInCountry(x,y),SummerOlympicsCountry(x,y),CityInState(x,y),StateInCountry(x,y),SummerOlympicsState(x,y),InSummerOlympics(x,y)
We can get these constants:
atlanta
Let's translate one by one.
Premises:
1.Text:If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.
Predicates:
SummerOlympicsCity(x,y),CityInCountry(x,y),SummerOlympicsCountry(x,y)
Constants:
us
Fol:∀x ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us))
2.Text:If a city is in a state which is in US, the city is a US city.
Predicates:
StateInCountry(x,y),CityInState(x,y),CityInCountry(x,y)
Constants:
us
Fol:∀x ∀y (CityInState(x, y) ∧ StateInCountry(y, us) → CityInCountry(x, us))
3.Text:If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.
Predicates:
SummerOlympicsCity(x,y),CityInState(x,y),SummerOlympicsState(x,y)
Fol:∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))
4.Text:The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).
Predicates:
SummerOlympicsCity(x,y)
Constants:
la
Fol:SummerOlympicsCity(y2028, la)
5.Text:LA is a city in California(CA).
Predicates:
CityInState(x,y)
Constants:
ca,la
Fol:CityInState(la, ca)
6.Text:Atlanta is a US city.
Predicates:
CityInCountry(x,y)
Constants:
atlanta,us
Fol:CityInCountry(atlanta, us)
7.Text:Atlanta is in Georgia(CA).
Predicates:
StateInCountry(x,y)
Constants:
ca,us
Fol:StateInCountry(ca, us)
8.Text:CA is a state in the United States.
Predicates:
CityInState(x,y)
Constants:
ga,atlanta
Fol:CityInState(atlanta, ga)
9.Text:Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.
Predicates:
InSummerOlympics(x,y)
Constants:
weightlifting,boxing,modern_pentathlon
Fol:¬InSummerOlympics(y2028, boxing) ∧ ¬InSummerOlympics(y2028, modern_pentathlon) ∧ ¬InSummerOlympics(y2028, weightlifting)
10.Text:Atlanta in the United States hold the 1996 Summer Olympics.
Predicates:
SummerOlympicsCity(x,y)
Constants:
atlanta
Fol:SummerOlympicsCity(y1996, atlanta)
Conclusion:
Text:The 2028 Summer Olympics will take place in the US.
Predicates:
SummerOlympicsCountry(x,y)
Constants:
us
Fol:SummerOlympicsCountry(y2028, us)"
"Premises:
1.All fruits sold in Boston are shipped from Columbia.
2.Some fruits sold in New Haven are shipped from Mexico.
3.No fruits shipped from Columbia are fruits sold in New York.
4.Avocadoe are a kind of fruit sold in New York or New York.
5.Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven.

Conclusion:
Avocados are a kind of fruit sold in New York.","We can get these predicates:
SoldBoston(x),ShippedFromColumbia(x),SoldNewHaven(x),ShippedFromMexico(x),SoldNewYork(x)
We can get these constants:
avocado
Let's translate one by one.
Premises:
1.Text:All fruits sold in Boston are shipped from Columbia.
Predicates:
SoldBoston(x),ShippedFromColumbia(x)
Fol:∀x (SoldBoston(x) → ShippedFromColumbia(x))
2.Text:Some fruits sold in New Haven are shipped from Mexico.
Predicates:
ShippedFromMexico(x),SoldNewHaven(x)
Fol:∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x))
3.Text:No fruits shipped from Columbia are fruits sold in New York.
Predicates:
SoldNewYork(x),ShippedFromColumbia(x)
Fol:∀x (ShippedFromColumbia(x) → ¬SoldNewYork(x))
4.Text:Avocadoe are a kind of fruit sold in New York or New York.
Predicates:
SoldBoston(x),SoldNewYork(x)
Constants:
avocado
Fol:SoldNewYork(avocado) ∨ SoldBoston(avocado)
5.Text:Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven.
Predicates:
ShippedFromColumbia(x),SoldNewHaven(x)
Constants:
avocado
Fol:¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))
Conclusion:
Text:Avocados are a kind of fruit sold in New York.
Predicates:
SoldNewYork(x)
Constants:
avocado
Fol:SoldNewYork(avocado)"
"Premises:
1.Miroslav Fiedler was a Czech mathematician.
2.Miroslav Fiedler is known for his contributions to linear algebra and graph theory.
3.Miroslav Fiedler is honored by the Fiedler eigenvalue.
4.Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.

Conclusion:
A Czech mathematician is known for his contributions to linear algebra and graph theory.","We can get these predicates:
Czech(x),Mathematician(x),KnownFor(x,y),HonoredBy(x,y),TheSecondSmallestEigenvalueOf(x,y)
We can get these constants:
fiedlerEigenvalue,theGraphLaplacian
Let's translate one by one.
Premises:
1.Text:Miroslav Fiedler was a Czech mathematician.
Predicates:
Czech(x),Mathematician(x)
Constants:
miroslavfiedler
Fol:Czech(miroslavfiedler) ∧ Mathematician(miroslavfiedler)
2.Text:Miroslav Fiedler is known for his contributions to linear algebra and graph theory.
Predicates:
KnownFor(x,y)
Constants:
miroslavfiedler,contributionsToLinearAlgebraAndGraphTheory
Fol:KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)
3.Text:Miroslav Fiedler is honored by the Fiedler eigenvalue.
Predicates:
HonoredBy(x,y)
Constants:
miroslavfiedler,fiedlerEigenvalue
Fol:HonoredBy(miroslavfiedler, fiedlerEigenvalue)
4.Text:Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.
Predicates:
TheSecondSmallestEigenvalueOf(x,y)
Constants:
fiedlerEigenvalue,theGraphLaplacian
Fol:TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)
Conclusion:
Text:A Czech mathematician is known for his contributions to linear algebra and graph theory.
Predicates:
Czech(x),KnownFor(x,y),Mathematician(x)
Constants:
contributionsToLinearAlgebraAndGraphTheory
Fol:∃x (Czech(x) ∧ Mathematician(x) ∧ KnownFor(x, contributionsToLinearAlgebraAndGraphTheory))"
"Premises:
1.The Lumina APV is produced by Chevrolet.
2.The Astro is a van produced by Chevrolet.
3.Cars produced by Chevrolet are either cars or vans.

Conclusion:
The Astro is a car.","We can get these predicates:
Chevrolet(x),Van(x),Car(x)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:The Lumina APV is produced by Chevrolet.
Predicates:
Chevrolet(x)
Constants:
luminaAPV
Fol:Chevrolet(luminaAPV)
2.Text:The Astro is a van produced by Chevrolet.
Predicates:
Van(x),Chevrolet(x)
Constants:
astro
Fol:Chevrolet(astro) ∧ Van(astro)
3.Text:Cars produced by Chevrolet are either cars or vans.
Predicates:
Van(x),Car(x),Chevrolet(x)
Fol:∀x (Chevrolet(x) → Car(x) ⊕ Van(x))
Conclusion:
Text:The Astro is a car.
Predicates:
Car(x)
Constants:
astro
Fol:Car(astro)"
"Premises:
1.Detroit City is a horse.
2.Some horses are racehorses.
3.If a horse falls during a race, then it dies.
4.Detroit City fell during a race.
5.A horse is a racehorse if it is in a race.

Conclusion:
Detroit City is a racehorse.","We can get these predicates:
Horse(x),Racehorse(x),Racing(x),Falls(x),Dead(x)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:Detroit City is a horse.
Predicates:
Horse(x)
Constants:
detroitcity
Fol:Horse(detroitcity)
2.Text:Some horses are racehorses.
Predicates:
Horse(x),Racehorse(x)
Fol:∃x (Horse(x) ∧ Racehorse(x))
3.Text:If a horse falls during a race, then it dies.
Predicates:
Dead(x),Horse(x),Falls(x),Racing(x)
Fol:∀x (Horse(x) ∧ Racing(x) ∧ Falls(x) → Dead(x))
4.Text:Detroit City fell during a race.
Predicates:
Racing(x),Falls(x)
Constants:
detroitcity
Fol:Racing(detroitcity) ∧ Falls(detroitcity)
5.Text:A horse is a racehorse if it is in a race.
Predicates:
Racehorse(x),Horse(x),Racing(x)
Fol:∀x (Horse(x) ∧ Racing(x) → Racehorse(x))
Conclusion:
Text:Detroit City is a racehorse.
Predicates:
Racehorse(x)
Constants:
detroitcity
Fol:Racehorse(detroitcity)"
"Premises:
1.The taiga vole is a large vole found in northwestern North America.
2.Cats like playing with all voles.
3.The taiga vole lives in the boreal taiga zone.
4.The boreal taiga zone in North America is a cold place to live in.
5.Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus.

Conclusion:
Cats like playing with taiga vole.","We can get these predicates:
Vole(x),Find(x,y),CatLikePlayingWith(x),Live(x,y),LiveInColdPlace(x),Larger(x,y)
We can get these constants:
taigaVole,microtusVole
Let's translate one by one.
Premises:
1.Text:The taiga vole is a large vole found in northwestern North America.
Predicates:
Vole(x),Find(x,y)
Constants:
northAmerica,taigaVole
Fol:Vole(taigaVole) ∧ Find(taigaVole, northAmerica)
2.Text:Cats like playing with all voles.
Predicates:
Vole(x),CatLikePlayingWith(x)
Fol:∀x (Vole(x) → CatLikePlayingWith(x))
3.Text:The taiga vole lives in the boreal taiga zone.
Predicates:
Live(x,y)
Constants:
borealTaigaZone,taigaVole
Fol:Live(taigaVole, borealTaigaZone)
4.Text:The boreal taiga zone in North America is a cold place to live in.
Predicates:
Live(x,y),LiveInColdPlace(x),Find(x,y)
Constants:
borealTaigaZone,northAmerica
Fol:∀x (Find(x, northAmerica) ∧ Live(x, borealTaigaZone) → LiveInColdPlace(x))
5.Text:Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus.
Predicates:
Larger(x,y)
Constants:
microtusVole,taigaVole
Fol:Larger(taigaVole, microtusVole)
Conclusion:
Text:Cats like playing with taiga vole.
Predicates:
CatLikePlayingWith(x)
Constants:
taigaVole
Fol:CatLikePlayingWith(taigaVole)"
"Premises:
1.Oxford Circus is a road junction connecting Oxford Street and Regent Street.
2.Oxford Street is in London.
3.John Nash designed the construction on Regent Street.
4.John Nash designed Oxford Circus.
5.John Nash is an architect in British.
6.Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.

Conclusion:
Oxford Circus is in London.","We can get these predicates:
OxfordStreet(x),RegentStreet(x),London(x),Design(x,y),British(x),Architect(x),CentralLine(x)
We can get these constants:
oxfordCircus
Let's translate one by one.
Premises:
1.Text:Oxford Circus is a road junction connecting Oxford Street and Regent Street.
Predicates:
RegentStreet(x),OxfordStreet(x)
Constants:
oxfordCircus
Fol:OxfordStreet(oxfordCircus) ∧ RegentStreet(oxfordCircus)
2.Text:Oxford Street is in London.
Predicates:
London(x),OxfordStreet(x)
Fol:∀x (OxfordStreet(x) → London(x))
3.Text:John Nash designed the construction on Regent Street.
Predicates:
RegentStreet(x),Design(x,y)
Constants:
johnNash
Fol:∃x (RegentStreet(x) ∧ Design(johnNash, x))
4.Text:John Nash designed Oxford Circus.
Predicates:
Design(x,y)
Constants:
oxfordCircus,johnNash
Fol:Design(johnNash, oxfordCircus)
5.Text:John Nash is an architect in British.
Predicates:
British(x),Architect(x)
Constants:
johnNash
Fol:British(johnNash) ∧ Architect(johnNash)
6.Text:Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.
Predicates:
CentralLine(x)
Constants:
oxfordCircus
Fol:CentralLine(oxfordCircus)
Conclusion:
Text:Oxford Circus is in London.
Predicates:
London(x)
Constants:
oxfordCircus
Fol:London(oxfordCircus)"
"Premises:
1.All products shipped from China are made in China.
2.All products sold in JD are shipped from China.
3.All products commonly used in China are sold in JD.
4.All products favored by young people are commonly used in China.
5.MacBook is not made in China and is not commonly used in China.

Conclusion:
The MacBook is made in China.","We can get these predicates:
ShipChina(x),MadeInChina(x),SoldJD(x),CommonlyUsedChina(x),FavoredByYoungPeople(x)
We can get these constants:
macbook
Let's translate one by one.
Premises:
1.Text:All products shipped from China are made in China.
Predicates:
ShipChina(x),MadeInChina(x)
Fol:∀x (ShipChina(x) → MadeInChina(x))
2.Text:All products sold in JD are shipped from China.
Predicates:
ShipChina(x),SoldJD(x)
Fol:∀x (SoldJD(x) → ShipChina(x))
3.Text:All products commonly used in China are sold in JD.
Predicates:
CommonlyUsedChina(x),SoldJD(x)
Fol:∀x (CommonlyUsedChina(x) → SoldJD(x))
4.Text:All products favored by young people are commonly used in China.
Predicates:
CommonlyUsedChina(x),FavoredByYoungPeople(x)
Fol:∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))
5.Text:MacBook is not made in China and is not commonly used in China.
Predicates:
CommonlyUsedChina(x),MadeInChina(x)
Constants:
macbook
Fol:¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))
Conclusion:
Text:The MacBook is made in China.
Predicates:
MadeInChina(x)
Constants:
macbook
Fol:MadeInChina(macbook)"
"Premises:
1.All animals that are tigers are cats.
2.No cats are dogs.
3.All Bengal tigers are tigers.
4.Everything that is a husky is a dog.
5.Fido is either a Bengal tiger or a cat.

Conclusion:
Fido is a Bengal tiger.","We can get these predicates:
Tiger(x),Cat(x),Dog(x),BengalTiger(x),Husky(x)
We can get these constants:
fido
Let's translate one by one.
Premises:
1.Text:All animals that are tigers are cats.
Predicates:
Tiger(x),Cat(x)
Fol:∀x (Tiger(x) → Cat(x))
2.Text:No cats are dogs.
Predicates:
Cat(x),Dog(x)
Fol:∀x (Cat(x) → ¬Dog(x))
3.Text:All Bengal tigers are tigers.
Predicates:
Tiger(x),BengalTiger(x)
Fol:∀x (BengalTiger(x) → Tiger(x))
4.Text:Everything that is a husky is a dog.
Predicates:
Husky(x),Dog(x)
Fol:∀x (Husky(x) → Dog(x))
5.Text:Fido is either a Bengal tiger or a cat.
Predicates:
Cat(x),BengalTiger(x)
Constants:
fido
Fol:BengalTiger(fido) ∨ Cat(fido)
Conclusion:
Text:Fido is a Bengal tiger.
Predicates:
BengalTiger(x)
Constants:
fido
Fol:BengalTiger(fido)"
"Premises:
1.Olivia doesn't prefer warm temperature during the day.
2.When Olivia sleeps, she prefers cool temperature.
3.Olivia sleeps during the night.
4.Olivia works during the day.
5.Olivia either works or sleeps.
6.The time is either the day or the night.
7.Olivia either prefers warm temperature or prefers cool temperature.

Conclusion:
At all times, Olivia prefers cool temperature.","We can get these predicates:
Day(x),PrefersWarmAt(x,y),SleepingDuring(x,y),PrefersCoolAt(x,y),Night(x),WorkingDuring(x,y)
We can get these constants:
olivia
Let's translate one by one.
Premises:
1.Text:Olivia doesn't prefer warm temperature during the day.
Predicates:
Day(x),PrefersWarmAt(x,y)
Constants:
olivia
Fol:∀x (Day(x) → ¬PrefersWarmAt(olivia, x))
2.Text:When Olivia sleeps, she prefers cool temperature.
Predicates:
SleepingDuring(x,y),PrefersCoolAt(x,y)
Constants:
olivia
Fol:∀x (SleepingDuring(olivia, x) → PrefersCoolAt(olivia, x))
3.Text:Olivia sleeps during the night.
Predicates:
SleepingDuring(x,y),Night(x)
Constants:
olivia
Fol:∀x (SleepingDuring(olivia, x) → Night(x))
4.Text:Olivia works during the day.
Predicates:
Day(x),WorkingDuring(x,y)
Constants:
olivia
Fol:∀x (WorkingDuring(olivia, x) → Day(x))
5.Text:Olivia either works or sleeps.
Predicates:
SleepingDuring(x,y),WorkingDuring(x,y)
Constants:
olivia
Fol:∀x (WorkingDuring(olivia, x) ∨ SleepingDuring(olivia, x))
6.Text:The time is either the day or the night.
Predicates:
Day(x),Night(x)
Fol:∀x (Day(x) ∨ Night(x))
7.Text:Olivia either prefers warm temperature or prefers cool temperature.
Predicates:
PrefersCoolAt(x,y),PrefersWarmAt(x,y)
Constants:
olivia
Fol:∀x (PrefersWarmAt(olivia, x) ∨ PrefersCoolAt(olivia, x))
Conclusion:
Text:At all times, Olivia prefers cool temperature.
Predicates:
PrefersCoolAt(x,y)
Constants:
olivia
Fol:∀x PrefersCoolAt(olivia, x)"
"Premises:
1.If you are on the payroll, then you are being paid by the school.
2.If someone has a job at a school, then they are on the payroll.
3.All faculty members have a job at a school.
4.One can either be a faculty member or a teacher.
5.Every teacher has students.
6.If Nancy is a teacher, then they are on the payroll.
7.If Nancy is not a teacher, then they are not paid by the school.

Conclusion:
Nancy is a faculty member.","We can get these predicates:
OnPayroll(x),PaidBySchool(x),JobAtSchool(x),FacultyMember(x),Teacher(x),HasStudents(x)
We can get these constants:
nancy
Let's translate one by one.
Premises:
1.Text:If you are on the payroll, then you are being paid by the school.
Predicates:
PaidBySchool(x),OnPayroll(x)
Fol:∀x (OnPayroll(x) → PaidBySchool(x))
2.Text:If someone has a job at a school, then they are on the payroll.
Predicates:
JobAtSchool(x),OnPayroll(x)
Fol:∀x (JobAtSchool(x) → OnPayroll(x))
3.Text:All faculty members have a job at a school.
Predicates:
JobAtSchool(x),FacultyMember(x)
Fol:∀x (FacultyMember(x) → JobAtSchool(x))
4.Text:One can either be a faculty member or a teacher.
Predicates:
Teacher(x),FacultyMember(x)
Fol:∀x (FacultyMember(x) ∨ Teacher(x))
5.Text:Every teacher has students.
Predicates:
Teacher(x),HasStudents(x)
Fol:∀x (Teacher(x) → HasStudents(x))
6.Text:If Nancy is a teacher, then they are on the payroll.
Predicates:
Teacher(x),OnPayroll(x)
Constants:
nancy
Fol:Teacher(nancy) → OnPayroll(nancy)
7.Text:If Nancy is not a teacher, then they are not paid by the school.
Predicates:
Teacher(x),OnPayroll(x)
Constants:
nancy
Fol:¬Teacher(nancy) → ¬OnPayroll(nancy)
Conclusion:
Text:Nancy is a faculty member.
Predicates:
FacultyMember(x)
Constants:
nancy
Fol:FacultyMember(nancy)"
"Premises:
1.There are five grades including A+, A, B+, B, and C in English.
2.If a student gets A+ in English, then his score is greater than 95.
3.If a student gets A in English, then his score is in the range of 90-95.
4.Zhang got an A in English.
5.Wang's English score is better than Zhang's.
6.Wu's English score is lower than 90.

Conclusion:
Zhang's English score is lower than 95.","We can get these predicates:
Grade(x),GetGrade(x,y),GreaterThan95(x),Range90to95(x),Better(x,y),LowerThan90(x)
We can get these constants:
wu
Let's translate one by one.
Premises:
1.Text:There are five grades including A+, A, B+, B, and C in English.
Predicates:
Grade(x)
Constants:
a+,b,a,b+,c
Fol:Grade(a+) ∨ Grade(a) ∨ Grade(b+) ∨ Grade(b) ∨ Grade(c)
2.Text:If a student gets A+ in English, then his score is greater than 95.
Predicates:
GetGrade(x,y),GreaterThan95(x)
Constants:
a+
Fol:∀x (GetGrade(x, a+) → GreaterThan95(x))
3.Text:If a student gets A in English, then his score is in the range of 90-95.
Predicates:
GetGrade(x,y),Range90to95(x)
Constants:
a
Fol:∀x (GetGrade(x, a) → Range90to95(x))
4.Text:Zhang got an A in English.
Predicates:
GetGrade(x,y)
Constants:
a
Fol:GetGrade(zhang, a)
5.Text:Wang's English score is better than Zhang's.
Predicates:
Better(x,y)
Constants:
wang
Fol:Better(wang, zhang)
6.Text:Wu's English score is lower than 90.
Predicates:
LowerThan90(x)
Constants:
wu
Fol:LowerThan90(wu)
Conclusion:
Text:Zhang's English score is lower than 95.
Predicates:
Range90to95(x)
Fol:Range90to95(zhang)"
"Premises:
1.If a class has prerequisites the student must take the prerequisites to take the class.
2.If a class has no prerequisites, then the student can take the class
3.CPSC 201 and CPSC 223 are prerequisites for CPSC 323.
4.Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.
5.Intro Geology has no prerequisites.

Conclusion:
CPSC 201 has no prerequisites.","We can get these predicates:
Prereq(x,y),Taken(x),CanTake(x)
We can get these constants:
introgeology
Let's translate one by one.
Premises:
1.Text:If a class has prerequisites the student must take the prerequisites to take the class.
Predicates:
CanTake(x),Prereq(x,y),Taken(x)
Fol:∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))
2.Text:If a class has no prerequisites, then the student can take the class
Predicates:
CanTake(x),Prereq(x,y)
Fol:∀x ∀y (¬Prereq(x, y) → CanTake(y))
3.Text:CPSC 201 and CPSC 223 are prerequisites for CPSC 323.
Predicates:
Prereq(x,y)
Constants:
cpsc201,cpsc223,cpsc323
Fol:Prereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)
4.Text:Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.
Predicates:
CanTake(x),Prereq(x,y),Taken(x)
Constants:
intermediatemicro,intromicro
Fol:(Prereq(intromicro, intermediatemicro) ∧ Taken(intromicro)) → CanTake(intermediatemicro)
5.Text:Intro Geology has no prerequisites.
Predicates:
Prereq(x,y)
Constants:
introgeology
Fol:∀x (¬Prereq(x, introgeology))
Conclusion:
Text:CPSC 201 has no prerequisites.
Predicates:
Prereq(x,y)
Constants:
cpsc201
Fol:∀x (¬Prereq(x, cpsc201))"
"Premises:
1.All men are human.
2.All gentlemen are men.
3.All lawyers are gentlemen.
4.All women are human.
5.No sheep are human.
6.If Mike is not both a human and a sheep, then Mike is either a man or a human.

Conclusion:
If Mike is a gentleman or a lawyer, then Mike is neither a woman nor a lawyer.","We can get these predicates:
Man(x),Human(x),Gentleman(x),Lawyer(x),Woman(x),Sheep(x)
We can get these constants:
mike
Let's translate one by one.
Premises:
1.Text:All men are human.
Predicates:
Man(x),Human(x)
Fol:∀x (Man(x) → Human(x))
2.Text:All gentlemen are men.
Predicates:
Gentleman(x),Man(x)
Fol:∀x (Gentleman(x) → Man(x))
3.Text:All lawyers are gentlemen.
Predicates:
Lawyer(x),Gentleman(x)
Fol:∀x (Lawyer(x) → Gentleman(x))
4.Text:All women are human.
Predicates:
Woman(x),Human(x)
Fol:∀x (Woman(x) → Human(x))
5.Text:No sheep are human.
Predicates:
Sheep(x),Human(x)
Fol:∀x (Sheep(x) → ¬Human(x))
6.Text:If Mike is not both a human and a sheep, then Mike is either a man or a human.
Predicates:
Man(x),Sheep(x),Human(x)
Constants:
mike
Fol:(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)
Conclusion:
Text:If Mike is a gentleman or a lawyer, then Mike is neither a woman nor a lawyer.
Predicates:
Lawyer(x),Gentleman(x),Woman(x)
Constants:
mike
Fol:(Gentleman(mike) ∨ Lawyer(mike)) → (¬Woman(mike) ∧ ¬Lawyer(mike))"
"Premises:
1.If a person doesn't have enough money to buy a product, then that person can't buy it.
2.Monitors are products.
3.4k monitors are more expensive than 1080 monitors and 2k monitors.
4.John is a person.
5.John doesn't have enough money to buy a 2k monitor.

Conclusion:
John can not buy the 2k monitor.","We can get these predicates:
Person(x),Product(x),HaveEnoughMoneyFor(x,y),Buy(x,y),Monitor(x),FourK(x),OneOEightO(x),TwoK(x),MoreExpensive(x,y)
We can get these constants:
john
Let's translate one by one.
Premises:
1.Text:If a person doesn't have enough money to buy a product, then that person can't buy it.
Predicates:
Product(x),Buy(x,y),Person(x),HaveEnoughMoneyFor(x,y)
Fol:∀x ∀y (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMoneyFor(x, y) → ¬Buy(x, y))
2.Text:Monitors are products.
Predicates:
Product(x),Monitor(x)
Fol:∀x (Monitor(x) → Product(x))
3.Text:4k monitors are more expensive than 1080 monitors and 2k monitors.
Predicates:
FourK(x),Monitor(x),MoreExpensive(x,y),TwoK(x),OneOEightO(x)
Fol:∀x ∀y ∀z (Monitor(x) ∧ Monitor(y) ∧ Monitor(z) ∧ FourK(x) ∧ OneOEightO(y) ∧ TwoK(z) → MoreExpensive(x, y) ∧ MoreExpensive(x, z))
4.Text:John is a person.
Predicates:
Person(x)
Constants:
john
Fol:Person(john)
5.Text:John doesn't have enough money to buy a 2k monitor.
Predicates:
TwoK(x),Monitor(x),HaveEnoughMoneyFor(x,y)
Constants:
john
Fol:∀x (Monitor(x) ∧ TwoK(x) → ¬HaveEnoughMoneyFor(john, x))
Conclusion:
Text:John can not buy the 2k monitor.
Predicates:
TwoK(x),Buy(x,y),Monitor(x)
Constants:
john
Fol:∀x (Monitor(x) ∧ TwoK(x) → ¬Buy(john, x))"
"Premises:
1.All people who are very consistent and enjoy sticking to their regular routines do not like surprises.
2.If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.
3.If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.
4.All old people living in stable homes do not like surprises.
5.If people have very high energy and are impulsive, then they like surprises.
6.If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.

Conclusion:
If Mike wears flannel shirts every day or does not like shopping for clothes and other materialistic goods, then Mike is neither an old person living in a stable home nor does not like shopping for clothes and other materialistic goods.","We can get these predicates:
Consistent(x),NoSurprises(x),Flannel(x),NoShopping(x),Old(x),Impulsive(x)
We can get these constants:
mike
Let's translate one by one.
Premises:
1.Text:All people who are very consistent and enjoy sticking to their regular routines do not like surprises.
Predicates:
NoSurprises(x),Consistent(x)
Fol:∀x (Consistent(x) → NoSurprises(x))
2.Text:If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.
Predicates:
Flannel(x),Consistent(x)
Fol:∀x (Flannel(x) → Consistent(x))
3.Text:If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.
Predicates:
NoShopping(x),Flannel(x)
Fol:∀x (NoShopping(x) → Flannel(x))
4.Text:All old people living in stable homes do not like surprises.
Predicates:
NoSurprises(x),Old(x)
Fol:∀x (Old(x) → NoSurprises(x))
5.Text:If people have very high energy and are impulsive, then they like surprises.
Predicates:
NoSurprises(x),Impulsive(x)
Fol:∀x (Impulsive(x) → ¬NoSurprises(x))
6.Text:If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.
Predicates:
NoSurprises(x),Consistent(x),Impulsive(x)
Constants:
mike
Fol:¬(NoSurprises(mike) ∧ Impulsive(mike)) → Consistent(mike) ⊕ NoSurprises(mike)
Conclusion:
Text:If Mike wears flannel shirts every day or does not like shopping for clothes and other materialistic goods, then Mike is neither an old person living in a stable home nor does not like shopping for clothes and other materialistic goods.
Predicates:
Flannel(x),Old(x),NoShopping(x)
Constants:
mike
Fol:(Flannel(mike) ∨ NoShopping(mike)) → ¬(Old(mike) ∧ NoShopping(mike))"
"Premises:
1.A roundel is a rounded artillery fortification.
2.A roundel is not higher than adjacent walls.
3.Cannons can be deployed on artillery fortifications.
4.Roundels are the oldest artillery fortifications.
5.Battery towers are an artillery fortification.

Conclusion:
Roundels are older than battery towers.","We can get these predicates:
Roundel(x),Rounded(x),ArtilleryFortification(x),AdjacentWall(x),Higher(x,y),DeployCannons(x),Older(x,y),BatteryTower(x)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:A roundel is a rounded artillery fortification.
Predicates:
Rounded(x),Roundel(x),ArtilleryFortification(x)
Fol:∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x))
2.Text:A roundel is not higher than adjacent walls.
Predicates:
AdjacentWall(x),Higher(x,y),Roundel(x)
Fol:∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))
3.Text:Cannons can be deployed on artillery fortifications.
Predicates:
DeployCannons(x),ArtilleryFortification(x)
Fol:∀x (ArtilleryFortification(x) → DeployCannons(x))
4.Text:Roundels are the oldest artillery fortifications.
Predicates:
Roundel(x),Older(x,y),ArtilleryFortification(x)
Fol:∀x ∀y (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y))
5.Text:Battery towers are an artillery fortification.
Predicates:
BatteryTower(x),ArtilleryFortification(x)
Fol:∀x (BatteryTower(x) → ArtilleryFortification(x))
Conclusion:
Text:Roundels are older than battery towers.
Predicates:
BatteryTower(x),Roundel(x),Older(x,y)
Fol:∀x ∀y (Roundel(x) ∧ BatteryTower(y) → Older(x, y))"
"Premises:
1.All Asians are human.
2.All Chinese are Asian.
3.A man is either Chinese or British.
4.All British are European.
5.All Spanish are European.
6.No Indian is European.
7.Jessee is either both an Indian and a human, or neither an Indian nor a human.

Conclusion:
If Jesse is either an Indian or a Spanish, then Jesse is either both British and European, or neither British nor European.","We can get these predicates:
Asian(x),Human(x),Chinese(x),British(x),European(x),Spanish(x),Indian(x)
We can get these constants:
jesse
Let's translate one by one.
Premises:
1.Text:All Asians are human.
Predicates:
Asian(x),Human(x)
Fol:∀x ( Asian(x)→  Human(x))
2.Text:All Chinese are Asian.
Predicates:
Asian(x),Chinese(x)
Fol:∀x ( Chinese(x)→  Asian(x))
3.Text:A man is either Chinese or British.
Predicates:
Chinese(x),British(x)
Fol:∀x ( Chinese(x) ∨  British(x))
4.Text:All British are European.
Predicates:
European(x),British(x)
Fol:∀x ( British(x)→  European(x))
5.Text:All Spanish are European.
Predicates:
European(x),Spanish(x)
Fol:∀x ( Spanish(x)→  European(x))
6.Text:No Indian is European.
Predicates:
European(x),Indian(x)
Fol:∀x ( Indian(x)→ ¬ European(x))
7.Text:Jessee is either both an Indian and a human, or neither an Indian nor a human.
Predicates:
Indian(x),Human(x)
Constants:
jesse
Fol:( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))
Conclusion:
Text:If Jesse is either an Indian or a Spanish, then Jesse is either both British and European, or neither British nor European.
Predicates:
European(x),British(x),Indian(x),Spanish(x)
Constants:
jesse
Fol:((Indian(jesse) ∨ Spanish(jesse)) → ((British(jesse) ∧ European(jesse)) ⊕ (¬ British(jesse) ∧ ¬ European(jesse))))"
"Premises:
1.Belgium, France and Germany are European countries.
2.Paris is the capital of France.
3.The Eiffel Tower is one of the main tourist attractions located in Paris.
4.Some people who live in Belgium speak French.
5.If John goes to Europe, he will see some tourist attractions.
6.John speaks French.

Conclusion:
The Eiffel Tower is located in the capital of France.","We can get these predicates:
EuropeanCountry(x),CapitalOf(x,y),TouristAttraction(x),LocatedIn(x,y),LiveIn(x,y),Speak(x,y),GoTo(x,y),See(x,y)
We can get these constants:
john,french
Let's translate one by one.
Premises:
1.Text:Belgium, France and Germany are European countries.
Predicates:
EuropeanCountry(x)
Constants:
france,belgium,germany
Fol:EuropeanCountry(belgium) ∨ EuropeanCountry(france) ∨ EuropeanCountry(germany)
2.Text:Paris is the capital of France.
Predicates:
CapitalOf(x,y)
Constants:
france,paris
Fol:CapitalOf(paris, france)
3.Text:The Eiffel Tower is one of the main tourist attractions located in Paris.
Predicates:
TouristAttraction(x),LocatedIn(x,y)
Constants:
eiffelTower,paris
Fol:TouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)
4.Text:Some people who live in Belgium speak French.
Predicates:
Speak(x,y),LiveIn(x,y)
Constants:
french,belgium
Fol:∃x (LiveIn(x, belgium) → Speak(x, french))
5.Text:If John goes to Europe, he will see some tourist attractions.
Predicates:
TouristAttraction(x),See(x,y),GoTo(x,y)
Constants:
europe,john
Fol:∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))
6.Text:John speaks French.
Predicates:
Speak(x,y)
Constants:
french,john
Fol:Speak(john, french)
Conclusion:
Text:The Eiffel Tower is located in the capital of France.
Predicates:
LocatedIn(x,y)
Constants:
eiffelTower,paris
Fol:LocatedIn(eiffelTower, paris)"
"Premises:
1.No fish are birds.
2.Everything that is an osprey is a bird.
3.If something is a carp, then it is a fish.
4.All goldfish are carp.
5.If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish.

Conclusion:
Bubbles is a carp.","We can get these predicates:
Fish(x),Bird(x),Osprey(x),Carp(x),Goldfish(x)
We can get these constants:
bubbles
Let's translate one by one.
Premises:
1.Text:No fish are birds.
Predicates:
Fish(x),Bird(x)
Fol:∀x (Fish(x) → ¬Bird(x))
2.Text:Everything that is an osprey is a bird.
Predicates:
Bird(x),Osprey(x)
Fol:∀x (Osprey(x) → Bird(x))
3.Text:If something is a carp, then it is a fish.
Predicates:
Fish(x),Carp(x)
Fol:∀x (Carp(x) → Fish(x))
4.Text:All goldfish are carp.
Predicates:
Goldfish(x),Carp(x)
Fol:∀x (Goldfish(x) → Carp(x))
5.Text:If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish.
Predicates:
Fish(x),Carp(x),Osprey(x)
Constants:
bubbles
Fol:Osprey(bubbles) ⊕ Carp(bubbles) → ¬Fish(bubbles)
Conclusion:
Text:Bubbles is a carp.
Predicates:
Carp(x)
Constants:
bubbles
Fol:Carp(bubbles)"
"Premises:
1.Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC).
2.Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.
3.As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.
4.Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958–1960).
5.Mao Zedong died in 1976.
6.After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.

Conclusion:
The paramount leader of the PRC was also the vice premier.","We can get these predicates:
ParamountLeaderOf(x,y),PraisedFor(x,y),PartysSecretaryGeneral(x),Under(x,y),VicePremier(x),PresidedOver(x,y),LaunchedBy(x,y),InstrumentalIn(x,y),Following(x,y),Disastrous(x),DiedIn(x,y),GraduallyRoseTo(x,y)
We can get these constants:
dengxiaoping,supremepower
Let's translate one by one.
Premises:
1.Text:Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC).
Predicates:
ParamountLeaderOf(x,y)
Constants:
dengxiaoping,prc
Fol:ParamountLeaderOf(dengxiaoping, prc)
2.Text:Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.
Predicates:
PraisedFor(x,y)
Constants:
dengxiaoping,reversionofhongkong,reaffirmationofreformprogram,returnofmacau
Fol:PraisedFor(dengxiaoping, reaffirmationofreformprogram) ∧ PraisedFor(dengxiaoping, reversionofhongkong) ∧ PraisedFor(dengxiaoping, returnofmacau)
3.Text:As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.
Predicates:
PresidedOver(x,y),VicePremier(x),LaunchedBy(x,y),Under(x,y),PartysSecretaryGeneral(x)
Constants:
dengxiaoping,mao,antirightistcampaign
Fol:PartysSecretaryGeneral(dengxiaoping) ∧ Under(dengxiaoping, mao) ∧ VicePremier(dengxiaoping) ∧ PresidedOver(dengxiaoping, antirightistcampaign) ∧ LaunchedBy(antirightistcampaign, mao)
4.Text:Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958–1960).
Predicates:
InstrumentalIn(x,y),Following(x,y),Disastrous(x)
Constants:
dengxiaoping,greatleapforward,chinaseconomicreconstruction
Fol:InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) ∧ Following(chinaseconomicreconstruction, greatleapforward) ∧ Disastrous(greatleapforward)
5.Text:Mao Zedong died in 1976.
Predicates:
DiedIn(x,y)
Constants:
mao
Fol:DiedIn(mao, y1976)
6.Text:After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.
Predicates:
GraduallyRoseTo(x,y)
Constants:
dengxiaoping,supremepower
Fol:GraduallyRoseTo(dengxiaoping, supremepower)
Conclusion:
Text:The paramount leader of the PRC was also the vice premier.
Predicates:
VicePremier(x),ParamountLeaderOf(x,y)
Constants:
dengxiaoping,prc
Fol:ParamountLeaderOf(dengxiaoping, prc) ∧ VicePremier(dengxiaoping)"
"Premises:
1.Guam has participated in the Winter Olympics.
2.In 1988, the Winter Olympics were held in Calgary.
3.Guam sent an athlete to the Calgary Winter Olympics.
4.If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics.
5.Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics.

Conclusion:
Guam has participated in the Summer Olympics at least once.","We can get these predicates:
ParticipatedIn(x,y),Year(x),BeHeld(x,y),SendAthletes(x),BeFrom(x,y)
We can get these constants:
bankert,winterolympics,guam
Let's translate one by one.
Premises:
1.Text:Guam has participated in the Winter Olympics.
Predicates:
ParticipatedIn(x,y)
Constants:
winterolympics,guam
Fol:ParticipatedIn(guam, winterolympics)
2.Text:In 1988, the Winter Olympics were held in Calgary.
Predicates:
BeHeld(x,y),Year(x)
Constants:
calgary,winterolympics
Fol:Year(y1988) → BeHeld(winterolympics, calgary)
3.Text:Guam sent an athlete to the Calgary Winter Olympics.
Predicates:
BeHeld(x,y),SendAthletes(x)
Constants:
calgary,winterolympics,guam
Fol:BeHeld(winterolympics, calgary) → SendAthletes(guam)
4.Text:If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics.
Predicates:
SendAthletes(x),ParticipatedIn(x,y)
Constants:
winterolympics,guam
Fol:SendAthletes(guam) → ParticipatedIn(guam, winterolympics)
5.Text:Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics.
Predicates:
ParticipatedIn(x,y),BeFrom(x,y)
Constants:
bankert,winterolympics,guam
Fol:BeFrom(bankert, guam) ∧ ParticipatedIn(bankert, winterolympics)
Conclusion:
Text:Guam has participated in the Summer Olympics at least once.
Predicates:
ParticipatedIn(x,y)
Constants:
summerolympics,guam
Fol:ParticipatedIn(guam, summerolympics)"
"Premises:
1.All students are members of the university.
2.All graduate students are students.
3.All PhD students are graduate students.
4.Some PhD students have high IQs.
5.If John is not a PhD student, then he is not a member of the university.
6.If John has a high IQ, then he is a PhD student or a graduate student.

Conclusion:
John has a high IQ.","We can get these predicates:
Student(x),MemberOfUniversity(x),GraduateStudent(x),PhDStudent(x),HighIQ(x)
We can get these constants:
john
Let's translate one by one.
Premises:
1.Text:All students are members of the university.
Predicates:
MemberOfUniversity(x),Student(x)
Fol:∀x (Student(x) → MemberOfUniversity(x))
2.Text:All graduate students are students.
Predicates:
GraduateStudent(x),Student(x)
Fol:∀x (GraduateStudent(x) → Student(x))
3.Text:All PhD students are graduate students.
Predicates:
GraduateStudent(x),PhDStudent(x)
Fol:∀x (PhDStudent(x) → GraduateStudent(x))
4.Text:Some PhD students have high IQs.
Predicates:
HighIQ(x),PhDStudent(x)
Fol:∃x (PhDStudent(x) ∧ HighIQ(x))
5.Text:If John is not a PhD student, then he is not a member of the university.
Predicates:
MemberOfUniversity(x),PhDStudent(x)
Constants:
john
Fol:¬PhDStudent(john) → ¬MemberOfUniversity(john)
6.Text:If John has a high IQ, then he is a PhD student or a graduate student.
Predicates:
GraduateStudent(x),HighIQ(x),PhDStudent(x)
Constants:
john
Fol:HighIQ(john) → PhDStudent(john) ⊕ GraduateStudent(john)
Conclusion:
Text:John has a high IQ.
Predicates:
HighIQ(x)
Constants:
john
Fol:HighIQ(john)"
"Premises:
1.A game is played with three stages: red stage, yellow stage, and green stage.
2.Each player begins at the red stage.
3.All players must reach the yellow stage before they can reach the green stage.
4.The yellow stage comes after the red stage.
5.All players must proceed one stage at a time.

Conclusion:
It is possible to complete the game without ever reaching the green stage.","We can get these predicates:
Player(x),StartRed(x),YellowToGreen(x),RedToYellow(x),RedToGreen(x),ReachedGreen(x)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:A game is played with three stages: red stage, yellow stage, and green stage.
Predicates:
Player(x)
Fol:∃x (Player(x))
2.Text:Each player begins at the red stage.
Predicates:
StartRed(x),Player(x)
Fol:∀x (Player(x) → StartRed(x))
3.Text:All players must reach the yellow stage before they can reach the green stage.
Predicates:
Player(x),YellowToGreen(x)
Fol:∀x (Player(x) → YellowToGreen(x))
4.Text:The yellow stage comes after the red stage.
Predicates:
RedToYellow(x),Player(x)
Fol:∀x (Player(x) → RedToYellow(x))
5.Text:All players must proceed one stage at a time.
Predicates:
RedToGreen(x),Player(x)
Fol:∀x (Player(x) → ¬RedToGreen(x))
Conclusion:
Text:It is possible to complete the game without ever reaching the green stage.
Predicates:
ReachedGreen(x),Player(x)
Fol:∃x (Player(x) ∧ ¬ReachedGreen(x))"
"Premises:
1.All commerical aircraft are produced by either Boeing or Airbus.
2.All American Airlines jets are commerical aircraft.
3.Airbus made more in revenue than Boeing last year.

Conclusion:
There exists a SpaceX commerical aircraft.","We can get these predicates:
CommercialAircraft(x),ProducedBy(x,y),AmericanAirlinesAircraft(x),MoreinRevenue(x,y)
We can get these constants:
airbus,boeing
Let's translate one by one.
Premises:
1.Text:All commerical aircraft are produced by either Boeing or Airbus.
Predicates:
CommercialAircraft(x),ProducedBy(x,y)
Constants:
airbus,boeing
Fol:∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))
2.Text:All American Airlines jets are commerical aircraft.
Predicates:
CommercialAircraft(x),AmericanAirlinesAircraft(x)
Fol:∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))
3.Text:Airbus made more in revenue than Boeing last year.
Predicates:
MoreinRevenue(x,y)
Constants:
airbus,boeing
Fol:MoreinRevenue(airbus, boeing)
Conclusion:
Text:There exists a SpaceX commerical aircraft.
Predicates:
CommercialAircraft(x),ProducedBy(x,y)
Constants:
spaceX
Fol:∃x (CommercialAircraft(x) ∧ ProducedBy(x, spaceX))"
"Premises:
1.People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.
2.If a person values physical touch as an especially important love language, then they are good with pets.
3.No people that are good with pets are scared of animals.
4.People are either scared of animals or love animals.
5.Adam is either a person who values physical touch as an especially important love language or a person who loves animals.

Conclusion:
Adam is scared of animals.","We can get these predicates:
Physical(x),Words(x),GoodWithPets(x),ScaredOfAnimals(x),LoveAnimals(x)
We can get these constants:
adam
Let's translate one by one.
Premises:
1.Text:People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.
Predicates:
Words(x),Physical(x)
Fol:∀x (Physical(x) ∨ Words(x))
2.Text:If a person values physical touch as an especially important love language, then they are good with pets.
Predicates:
GoodWithPets(x),Physical(x)
Fol:∀x (Physical(x) → GoodWithPets(x))
3.Text:No people that are good with pets are scared of animals.
Predicates:
ScaredOfAnimals(x),GoodWithPets(x)
Fol:∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))
4.Text:People are either scared of animals or love animals.
Predicates:
LoveAnimals(x),ScaredOfAnimals(x)
Fol:∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))
5.Text:Adam is either a person who values physical touch as an especially important love language or a person who loves animals.
Predicates:
LoveAnimals(x),Physical(x)
Constants:
adam
Fol:Physical(adam) ⊕ LoveAnimals(adam)
Conclusion:
Text:Adam is scared of animals.
Predicates:
ScaredOfAnimals(x)
Constants:
adam
Fol:ScaredOfAnimals(adam)"
"Premises:
1.ETS develops various standardized tests primarily in the United States for K-12 and higher education.
2.ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.
3.Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.
4.ETS also develops K-12 statewide assessments used for accountability testing in many states.

Conclusion:
ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.","We can get these predicates:
Develops(x,y),StandardizedTest(x),In(x,y),For(x,y),Administers(x,y),InternationalTest(x),TOEFL(x),TOEIC(x),GRE(x),SubjectTests(x),AssociatedWith(x,y),StateWideAssesment(x),UsedFor(x,y)
We can get these constants:
accountabilitytesting,ets
Let's translate one by one.
Premises:
1.Text:ETS develops various standardized tests primarily in the United States for K-12 and higher education.
Predicates:
Develops(x,y),StandardizedTest(x),For(x,y),In(x,y)
Constants:
unitedstates,k-12andhighereducation,ets
Fol:∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))
2.Text:ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.
Predicates:
GRE(x),SubjectTests(x),InternationalTest(x),TOEFL(x),Administers(x,y),TOEIC(x)
Constants:
ets
Fol:∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))
3.Text:Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.
Predicates:
Develops(x,y),AssociatedWith(x,y)
Constants:
entrytouseducationinstitutions,ets
Fol:∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))
4.Text:ETS also develops K-12 statewide assessments used for accountability testing in many states.
Predicates:
UsedFor(x,y),StateWideAssesment(x),Develops(x,y)
Constants:
accountabilitytesting,ets
Fol:∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))
Conclusion:
Text:ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.
Predicates:
StateWideAssesment(x),Develops(x,y),AssociatedWith(x,y)
Constants:
entrytouseducationinstitutions,ets
Fol:∃x (Develops(ets, x) ∧ (StateWideAssesment(x) ∨ AssociatedWith(x, entrytouseducationinstitutions)))"
"Premises:
1.All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.
2.There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.
3.People either enjoy eating gelato ice cream or love to travel and vacation often.
4.If people often take study abroad semesters to Europe, then they do not regret their college experiences.
5.If people love to travel and vacation often, then they often take study abroad semesters to Europe.
6.Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often.

Conclusion:
Robert can resist the hallmark delectable drinks and desserts that are famed in Italy.","We can get these predicates:
Gelato(x),Italy(x),Resist(x),Travel(x),Europe(x),Regret(x)
We can get these constants:
robert
Let's translate one by one.
Premises:
1.Text:All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.
Predicates:
Italy(x),Gelato(x)
Fol:∀x (Gelato(x) → Italy(x))
2.Text:There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.
Predicates:
Resist(x)
Fol:∀x (¬Resist(x))
3.Text:People either enjoy eating gelato ice cream or love to travel and vacation often.
Predicates:
Gelato(x),Travel(x)
Fol:∀x (Gelato(x) ∨ Travel(x))
4.Text:If people often take study abroad semesters to Europe, then they do not regret their college experiences.
Predicates:
Regret(x),Europe(x)
Fol:∀x (Europe(x) → ¬Regret(x))
5.Text:If people love to travel and vacation often, then they often take study abroad semesters to Europe.
Predicates:
Europe(x),Travel(x)
Fol:∀x (Travel(x) → Europe(x))
6.Text:Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often.
Predicates:
Gelato(x),Travel(x)
Constants:
robert
Fol:(Gelato(robert) ∧ Travel(robert)) ∨ (¬Gelato(robert) ∧ ¬Travel(robert))
Conclusion:
Text:Robert can resist the hallmark delectable drinks and desserts that are famed in Italy.
Predicates:
Resist(x)
Constants:
robert
Fol:Resist(robert)"
"Premises:
1.The installment sales method is the approach to recognize revenue under the US GAAP.
2.In accrual accounting, revenues are recognized when they are realized.
3.In cash accounting, revenues are recognized when cash is received.
4.The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.
5.Sally works for the US Securities and Exchange Commission.

Conclusion:
Sally does not work for a company that uses the GAAP.","We can get these predicates:
UsesGAAP(x),UsesInstallmentMethod(x),UsesAccruralAccounting(x),RecognizedWhen(x,y),UsesCashAccounting(x),DevelopedBy(x,y),WorksFor(x,y)
We can get these constants:
sally,ussecuritiesandexchangecommission
Let's translate one by one.
Premises:
1.Text:The installment sales method is the approach to recognize revenue under the US GAAP.
Predicates:
UsesInstallmentMethod(x),UsesGAAP(x)
Fol:∀x (UsesGAAP(x) → UsesInstallmentMethod(x))
2.Text:In accrual accounting, revenues are recognized when they are realized.
Predicates:
RecognizedWhen(x,y),UsesAccruralAccounting(x)
Constants:
revenues,realized
Fol:∀x (UsesAccruralAccounting(x) → RecognizedWhen(revenues, realized))
3.Text:In cash accounting, revenues are recognized when cash is received.
Predicates:
RecognizedWhen(x,y),UsesCashAccounting(x)
Constants:
cashrecieved,revenues
Fol:∀x (UsesCashAccounting(x) → RecognizedWhen(revenues, cashrecieved))
4.Text:The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.
Predicates:
UsesGAAP(x),DevelopedBy(x,y)
Constants:
usgaap,ussecuritiesandexchangecommission
Fol:DevelopedBy(usgaap, ussecuritiesandexchangecommission) ∧ UsesGAAP(ussecuritiesandexchangecommission)
5.Text:Sally works for the US Securities and Exchange Commission.
Predicates:
WorksFor(x,y)
Constants:
sally,ussecuritiesandexchangecommission
Fol:WorksFor(sally, ussecuritiesandexchangecommission)
Conclusion:
Text:Sally does not work for a company that uses the GAAP.
Predicates:
UsesGAAP(x),WorksFor(x,y)
Constants:
sally
Fol:¬∃x (WorksFor(sally, x) ∧ UsesGAAP(x))"
"Premises:
1.Evangelos Eleftheriou is a Greek electrical engineer.
2.Evangelos Eleftheriou worked for IBM in Zurich.
3.If a company has employees working for them somewhere, then they have an office there.
4.IBM is a company.

Conclusion:
No Greeks have worked for IBM.","We can get these predicates:
Greek(x),ElectricalEngineer(x),WorkedFor(x,y),WorkedIn(x,y),Company(x),HasOfficeIn(x,y)
We can get these constants:
ibm
Let's translate one by one.
Premises:
1.Text:Evangelos Eleftheriou is a Greek electrical engineer.
Predicates:
Greek(x),ElectricalEngineer(x)
Constants:
evangeloseleftheriou
Fol:Greek(evangeloseleftheriou) ∧ ElectricalEngineer(evangeloseleftheriou)
2.Text:Evangelos Eleftheriou worked for IBM in Zurich.
Predicates:
WorkedIn(x,y),WorkedFor(x,y)
Constants:
ibm,evangeloseleftheriou
Fol:WorkedFor(evangeloseleftheriou, ibm) ∧ WorkedIn(evangeloseleftheriou, zurich)
3.Text:If a company has employees working for them somewhere, then they have an office there.
Predicates:
HasOfficeIn(x,y),WorkedFor(x,y),WorkedIn(x,y),Company(x)
Fol:∀x ∀x ∀z (Company(x) ∧ WorkedFor(y, x) ∧ WorkedIn(y, z) → HasOfficeIn(x, z))
4.Text:IBM is a company.
Predicates:
Company(x)
Constants:
ibm
Fol:Company(ibm)
Conclusion:
Text:No Greeks have worked for IBM.
Predicates:
Greek(x),WorkedFor(x,y)
Constants:
ibm
Fol:¬∃x (Greek(x) ∧ WorkedFor(x, ibm))"
"Premises:
1.If a album is written by a rock band, then the genre of the album is rock.
2.If a band writes a album winning an award, then this band wins this award.
3.Trouble at the Henhouse is an album by The Tragically Hip.
4.The Tragically Hip is a Canadian rock band.
5.The song ""Butts Wigglin'"" is in Trouble at the Henhouse.
6.Trouble at the Henhouse won the Album of the Year award.
7.A song in Trouble at the Henhouse appeared in a film.

Conclusion:
The genre of Trouble at the Henhouse is rock.","We can get these predicates:
AlbumByBand(x,y),RockBand(x,y),Genre(x,y),AlbumAward(x,y),RockBandAward(x,y),SongInAlbum(x,y),SongInFilm(x)
We can get these constants:
trouble_at_the_Henhouse
Let's translate one by one.
Premises:
1.Text:If a album is written by a rock band, then the genre of the album is rock.
Predicates:
RockBand(x,y),Genre(x,y),AlbumByBand(x,y)
Constants:
rock
Fol:∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock))
2.Text:If a band writes a album winning an award, then this band wins this award.
Predicates:
AlbumAward(x,y),RockBandAward(x,y),AlbumByBand(x,y)
Fol:∀x ∀y ∀z (AlbumByBand(x, y) ∧ AlbumAward(x, z) → RockBandAward(y, z))
3.Text:Trouble at the Henhouse is an album by The Tragically Hip.
Predicates:
AlbumByBand(x,y)
Constants:
trouble_at_the_Henhouse,the_Tragically_Hip
Fol:AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)
4.Text:The Tragically Hip is a Canadian rock band.
Predicates:
RockBand(x,y)
Constants:
canada,the_Tragically_Hip
Fol:RockBand(the_Tragically_Hip, canada)
5.Text:The song ""Butts Wigglin'"" is in Trouble at the Henhouse.
Predicates:
SongInAlbum(x,y)
Constants:
butts_Wigglin,trouble_at_the_Henhouse
Fol:SongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)
6.Text:Trouble at the Henhouse won the Album of the Year award.
Predicates:
AlbumAward(x,y)
Constants:
the_Album_of_the_Year,trouble_at_the_Henhouse
Fol:AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)
7.Text:A song in Trouble at the Henhouse appeared in a film.
Predicates:
SongInAlbum(x,y),SongInFilm(x)
Constants:
trouble_at_the_Henhouse
Fol:∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))
Conclusion:
Text:The genre of Trouble at the Henhouse is rock.
Predicates:
Genre(x,y)
Constants:
trouble_at_the_Henhouse,rock
Fol:Genre(trouble_at_the_Henhouse, rock)"
"Premises:
1.Before releasing their single, ""Hooray! Hooray! It's a Holi-Holiday!"", Boney M. had had seven consecutive German #1 singles.
2.""Hooray! Hooray! It's a Holi-Holiday!"" was a big hit all over Europe.
3.Nevertheless, ""Hooray! Hooray! It's a Holi-Holiday!"" broke Boney M's streak of consecutive German #1 singles.
4.A song that peaks below #1 on the german charts is also a song that is not the #1 single

Conclusion:
""Hooray! Hooray! It's a Holi-Holiday!"" was a #1 hit in Germany.","We can get these predicates:
Song(x),By(x,y),N1GermanSingle(x),HitEurope(x),PeaksBelowN1(x)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:Before releasing their single, ""Hooray! Hooray! It's a Holi-Holiday!"", Boney M. had had seven consecutive German #1 singles.
Predicates:
N1GermanSingle(x),By(x,y),Song(x)
Constants:
boneym
Fol:∃x (Song(x) ∧ By(x, boneym) ∧ N1GermanSingle(x))
2.Text:""Hooray! Hooray! It's a Holi-Holiday!"" was a big hit all over Europe.
Predicates:
HitEurope(x),Song(x)
Constants:
hooray
Fol:Song(hooray) ∧ HitEurope(hooray)
3.Text:Nevertheless, ""Hooray! Hooray! It's a Holi-Holiday!"" broke Boney M's streak of consecutive German #1 singles.
Predicates:
N1GermanSingle(x),Song(x)
Constants:
hooray
Fol:Song(hooray) ∧ ¬N1GermanSingle(hooray)
4.Text:A song that peaks below #1 on the german charts is also a song that is not the #1 single
Predicates:
N1GermanSingle(x),PeaksBelowN1(x)
Fol:∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x))
Conclusion:
Text:""Hooray! Hooray! It's a Holi-Holiday!"" was a #1 hit in Germany.
Predicates:
N1GermanSingle(x)
Constants:
hooray
Fol:N1GermanSingle(hooray)"
"Premises:
1.Metropolitan Museum of Art is a museum in NYC.
2.Whitney Museum of American Art is a museum in NYC.
3.Museum of Modern Art (MoMA) is a museum if NYC.
4.Metropolitan Museum of Art includes Bytantine and Islamic Art.
5.Whitney Museum of American Art includes American art.

Conclusion:
A museum in NYC includes American art.","We can get these predicates:
Museum(x),InNYC(x),Include(x,y)
We can get these constants:
whitneyMuseumofAmericanArt,americanArt
Let's translate one by one.
Premises:
1.Text:Metropolitan Museum of Art is a museum in NYC.
Predicates:
InNYC(x),Museum(x)
Constants:
metropolitanMuseumofArt
Fol:Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)
2.Text:Whitney Museum of American Art is a museum in NYC.
Predicates:
InNYC(x),Museum(x)
Constants:
whitneyMuseumofAmericanArt
Fol:Museum(whitneyMuseumofAmericanArt) ∧ InNYC(whitneyMuseumofAmericanArt)
3.Text:Museum of Modern Art (MoMA) is a museum if NYC.
Predicates:
InNYC(x),Museum(x)
Constants:
museumofModernArt
Fol:Museum(museumofModernArt) ∧ InNYC(museumofModernArt)
4.Text:Metropolitan Museum of Art includes Bytantine and Islamic Art.
Predicates:
Include(x,y)
Constants:
metropolitanMuseumofArt,islamicArt,byzantineArt
Fol:Include(metropolitanMuseumofArt, byzantineArt) ∧ Include(metropolitanMuseumofArt, islamicArt)
5.Text:Whitney Museum of American Art includes American art.
Predicates:
Include(x,y)
Constants:
americanArt,whitneyMuseumofAmericanArt
Fol:Include(whitneyMuseumofAmericanArt, americanArt)
Conclusion:
Text:A museum in NYC includes American art.
Predicates:
InNYC(x),Museum(x),Include(x,y)
Constants:
americanArt
Fol:∃x (Museum(x) ∧ InNYC(x) ∧ Include(x, americanArt))"
"Premises:
1.A person either likes eating cheese or is a francophile.
2.No francophiles are people who like Spain as their favorite country.
3.A person likes Spain as their favorite country or likes eating cheese.
4.Benji is not a person who likes eating cheese and a person who studies Spanish.
5.If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French.

Conclusion:
Benji is a person who likes eating cheese.","We can get these predicates:
Spanish(x),Francophile(x),SpainFav(x),Cheese(x),French(x)
We can get these constants:
benji
Let's translate one by one.
Premises:
1.Text:A person either likes eating cheese or is a francophile.
Predicates:
Francophile(x),Spanish(x)
Fol:∀x (Spanish(x) ∨ Francophile(x))
2.Text:No francophiles are people who like Spain as their favorite country.
Predicates:
Francophile(x),SpainFav(x)
Fol:∀x (Francophile(x) → ¬SpainFav(x))
3.Text:A person likes Spain as their favorite country or likes eating cheese.
Predicates:
SpainFav(x),Cheese(x)
Fol:∀x (SpainFav(x) ∨ Cheese(x))
4.Text:Benji is not a person who likes eating cheese and a person who studies Spanish.
Predicates:
Cheese(x),Spanish(x)
Constants:
benji
Fol:¬(Cheese(benji) ∧ Spanish(benji))
5.Text:If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French.
Predicates:
Spanish(x),French(x),Cheese(x)
Constants:
benji
Fol:¬(Spanish(benji) ∨ French(benji)) → ¬(Cheese(benji) ⊕ French(benji))
Conclusion:
Text:Benji is a person who likes eating cheese.
Predicates:
Cheese(x)
Constants:
benji
Fol:Cheese(benji)"
"Premises:
1.All phones are things.
2.All cellphones are phones.
3.All iPhones are cellphones.
4.All engineers are workers.
5.All workers are human.
6.Jack is either an engineer or a worker.
7.Jack is is either a human or a phone.

Conclusion:
Jack is a thing.","We can get these predicates:
Phone(x),Thing(x),Cellphone(x),Iphone(x),Engineer(x),Worker(x),Human(x)
We can get these constants:
jack
Let's translate one by one.
Premises:
1.Text:All phones are things.
Predicates:
Thing(x),Phone(x)
Fol:∀x (Phone(x) → Thing(x))
2.Text:All cellphones are phones.
Predicates:
Cellphone(x),Phone(x)
Fol:∀x (Cellphone(x) → Phone(x))
3.Text:All iPhones are cellphones.
Predicates:
Iphone(x),Cellphone(x)
Fol:∀x (Iphone(x) → Cellphone(x))
4.Text:All engineers are workers.
Predicates:
Engineer(x),Worker(x)
Fol:∀x (Engineer(x) → Worker(x))
5.Text:All workers are human.
Predicates:
Worker(x),Human(x)
Fol:∀x (Worker(x) → Human(x))
6.Text:Jack is either an engineer or a worker.
Predicates:
Engineer(x),Worker(x)
Constants:
jack
Fol:Engineer(jack) ⊕ Worker(jack)
7.Text:Jack is is either a human or a phone.
Predicates:
Phone(x),Human(x)
Constants:
jack
Fol:Human(jack) ⊕ Phone(jack)
Conclusion:
Text:Jack is a thing.
Predicates:
Thing(x)
Constants:
jack
Fol:Thing(jack)"
"Premises:
1.New York City is Located in the United States of America.
2.United States of America is part of North America.
3.North America is in the western hemisphere of the earth.
4.New York City is a highly developed city.
5.If place A is located in place B and place B is located in place C, then place A is located in place C.

Conclusion:
USA is not located in western hemisphere of the earth.","We can get these predicates:
Locate(x,y),HighlyDeveloped(x)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:New York City is Located in the United States of America.
Predicates:
Locate(x,y)
Constants:
nyc,usa
Fol:Locate(nyc, usa)
2.Text:United States of America is part of North America.
Predicates:
Locate(x,y)
Constants:
usa,northAmerica
Fol:Locate(usa, northAmerica)
3.Text:North America is in the western hemisphere of the earth.
Predicates:
Locate(x,y)
Constants:
northAmerica,westHemisphere
Fol:Locate(northAmerica, westHemisphere)
4.Text:New York City is a highly developed city.
Predicates:
HighlyDeveloped(x)
Constants:
nyc
Fol:HighlyDeveloped(nyc)
5.Text:If place A is located in place B and place B is located in place C, then place A is located in place C.
Predicates:
Locate(x,y)
Fol:∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))
Conclusion:
Text:USA is not located in western hemisphere of the earth.
Predicates:
Locate(x,y)
Constants:
usa,westHemisphere
Fol:¬Locate(usa, westHemisphere)"
"Premises:
1.Westworld is an American science fiction-thriller TV series.
2.In 2016, a new television series named Westworld debuted on HBO.
3.The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.
4.The 1973 film Westworld is about robots that malfunction and begin killing the human visitors.

Conclusion:
Michael Crichton has directed a film about robots.","We can get these predicates:
TVSeries(x),American(x),ScienceFictionThriller(x),Debut(x,y),Adapt(x,y),Produce(x,y),Write(x,y),Direct(x,y),About(x,y)
We can get these constants:
robots,westworld
Let's translate one by one.
Premises:
1.Text:Westworld is an American science fiction-thriller TV series.
Predicates:
TVSeries(x),American(x),ScienceFictionThriller(x)
Constants:
westworld
Fol:TVSeries(westworld) ∧ American(westworld) ∧ ScienceFictionThriller(westworld)
2.Text:In 2016, a new television series named Westworld debuted on HBO.
Predicates:
Debut(x,y)
Constants:
westworld
Fol:Debut(westworld, year2016)
3.Text:The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.
Predicates:
Produce(x,y),Direct(x,y),Adapt(x,y),Write(x,y)
Constants:
westworld,michael
Fol:∃x (Adapt(westworld, x) ∧ Produce(x, year1973) ∧ Write(michael, x) ∧ Direct(michael, x))
4.Text:The 1973 film Westworld is about robots that malfunction and begin killing the human visitors.
Predicates:
About(x,y)
Constants:
westworld,robots
Fol:About(westworld, robots)
Conclusion:
Text:Michael Crichton has directed a film about robots.
Predicates:
Direct(x,y),About(x,y)
Constants:
robots,michael
Fol:∃x (Direct(michael, x) ∧ About(x, robots))"
"Premises:
1.The 2008 Summer Olympics were held in Beijing, China.
2.The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.
3.China won the most gold medals (48) in the 2008 Summer Olympics.
4.The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.
5.The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.
6.If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.
7.87 countries won at least one medal during the 2008 Games.

Conclusion:
Russia did not win fewer gold medals than China.","We can get these predicates:
HeldIn(x,y),SecondToBe(x,y),Won(x,y),Placed(x,y),FewerGoldMedalsThan(x,y),Country(x)
We can get these constants:
medal
Let's translate one by one.
Premises:
1.Text:The 2008 Summer Olympics were held in Beijing, China.
Predicates:
HeldIn(x,y)
Constants:
summer2008olympics,beijingchina
Fol:HeldIn(summer2008olympics, beijingchina)
2.Text:The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.
Predicates:
SecondToBe(x,y)
Constants:
summer2008olympics,heldincommuniststate
Fol:SecondToBe(summer2008olympics, heldincommuniststate)
3.Text:China won the most gold medals (48) in the 2008 Summer Olympics.
Predicates:
Won(x,y)
Constants:
mostgoldmedals,china
Fol:Won(china, mostgoldmedals)
4.Text:The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.
Predicates:
Won(x,y),Placed(x,y)
Constants:
unitedstates,secondingoldmedals,highestnumberofmedals
Fol:Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)
5.Text:The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.
Predicates:
Placed(x,y)
Constants:
russia,thirdingoldmedals
Fol:Placed(russia, thirdingoldmedals)
6.Text:If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.
Predicates:
Won(x,y),Placed(x,y),FewerGoldMedalsThan(x,y)
Constants:
mostgoldmedals,thirdingoldmedals
Fol:∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))
7.Text:87 countries won at least one medal during the 2008 Games.
Predicates:
Won(x,y),Country(x)
Constants:
medal
Fol:∃x (Country(x) ∧ Won(x, medal))
Conclusion:
Text:Russia did not win fewer gold medals than China.
Predicates:
FewerGoldMedalsThan(x,y)
Constants:
russia,china
Fol:¬FewerGoldMedalsThan(russia, china)"
"Premises:
1.There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.
2.When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.
3.If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.

Conclusion:
If someone is cooking downstairs, it will always cause the first floor to become smokey.","We can get these predicates:
Kitchen(x),Up(x),Down(x),Cook(x),Run(x),Smokey(x)
We can get these constants:
secondFloor,ac,downstairs
Let's translate one by one.
Premises:
1.Text:There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.
Predicates:
Kitchen(x),Down(x),Up(x)
Fol:∀x (Kitchen(x) → Up(x) ⊕ Down(x))
2.Text:When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.
Predicates:
Cook(x),Run(x),Smokey(x)
Constants:
downstairs,firstFloor,ac
Fol:(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor)
3.Text:If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.
Predicates:
Cook(x),Run(x),Smokey(x)
Constants:
secondFloor,downstairs,ac
Fol:(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)
Conclusion:
Text:If someone is cooking downstairs, it will always cause the first floor to become smokey.
Predicates:
Cook(x),Smokey(x)
Constants:
downstairs,firstFloor
Fol:(Cook(downstairs) → Smokey(firstFloor))"
"Premises:
1.All extroverts are overtly expressive.
2.People are either extroverts or introverts.
3.If someone is an introvert, then they are shy and reticent.
4.No shy and reticent person likes to talk to strangers.
5.Jeff is not an extrovert and someone who likes to talk to strangers.

Conclusion:
Jeff is overtly expressive and likes to talk to strangers.","We can get these predicates:
Extroverts(x),OvertlyExpressive(x),Introverts(x),ShyAndReticentPerson(x),LikeToTalkToStrangers(x)
We can get these constants:
jeff
Let's translate one by one.
Premises:
1.Text:All extroverts are overtly expressive.
Predicates:
Extroverts(x),OvertlyExpressive(x)
Fol:∀x (Extroverts(x) → OvertlyExpressive(x))
2.Text:People are either extroverts or introverts.
Predicates:
Extroverts(x),Introverts(x)
Fol: ∀x (Extroverts(x) ∨ Introverts(x))
3.Text:If someone is an introvert, then they are shy and reticent.
Predicates:
ShyAndReticentPerson(x),Introverts(x)
Fol: ∀x (Introverts(x) → ShyAndReticentPerson(x))
4.Text:No shy and reticent person likes to talk to strangers.
Predicates:
ShyAndReticentPerson(x),LikeToTalkToStrangers(x)
Fol: ∀x (ShyAndReticentPerson(x) → ¬LikeToTalkToStrangers(x))
5.Text:Jeff is not an extrovert and someone who likes to talk to strangers.
Predicates:
LikeToTalkToStrangers(x),Extroverts(x)
Constants:
jeff
Fol: ¬Extroverts(jeff) ∧ ¬LikeToTalkToStrangers(jeff)
Conclusion:
Text:Jeff is overtly expressive and likes to talk to strangers.
Predicates:
LikeToTalkToStrangers(x),OvertlyExpressive(x)
Constants:
jeff
Fol:OvertlyExpressive(jeff) ∧ LikeToTalkToStrangers(jeff)"
"Premises:
1.Ambiortus is a prehistoric bird genus.
2.Ambiorus Dementjevi is the only known species of Ambiortus.
3.The Mongol region was where Ambiorus Dementjevi lived.
4.Yevgeny Kurochkin was the discoverer of Ambiortus.

Conclusion:
All species of Ambiortus live in the Mongol region.","We can get these predicates:
Prehistoric(x),BirdGenus(x),Species(x,y),AmbiortusDementjevi(x),Lived(x,y),Discovered(x,y)
We can get these constants:
ambiortus
Let's translate one by one.
Premises:
1.Text:Ambiortus is a prehistoric bird genus.
Predicates:
BirdGenus(x),Prehistoric(x)
Constants:
ambiortus
Fol:Prehistoric(ambiortus) ∧ BirdGenus(ambiortus)
2.Text:Ambiorus Dementjevi is the only known species of Ambiortus.
Predicates:
AmbiortusDementjevi(x),Species(x,y)
Constants:
ambiortus
Fol:∀x (Species(x, ambiortus) → AmbiortusDementjevi(x))
3.Text:The Mongol region was where Ambiorus Dementjevi lived.
Predicates:
AmbiortusDementjevi(x),Lived(x,y)
Constants:
mongolregion
Fol:∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))
4.Text:Yevgeny Kurochkin was the discoverer of Ambiortus.
Predicates:
Discovered(x,y)
Constants:
ambiortus
Fol:Discovered(yevgenykurochkin, ambiortus)
Conclusion:
Text:All species of Ambiortus live in the Mongol region.
Predicates:
Lived(x,y),Species(x,y)
Constants:
mongolregion,ambiortus
Fol:∀x (Species(x, ambiortus) → Lived(x, mongolregion))"
"Premises:
1.All buildings in New Haven are low.
2.All buildings managed by the Yale Housing are located in New Haven.
3.All buildings in Manhattans are high.
4.All buildings owned by Bloomberg are located in Manhattans.
5.All buildings with the Bloomberg logo are owned by Bloomberg.
6.Tower A is managed by the Yale Housing.
7.Tower B is with the Bloomberg logo.

Conclusion:
Tower B is located in New Haven.","We can get these predicates:
Located(x,y),High(x),YaleHousing(x),Bloomberg(x),BloombergLogo(x)
We can get these constants:
tower-b
Let's translate one by one.
Premises:
1.Text:All buildings in New Haven are low.
Predicates:
High(x),Located(x,y)
Constants:
newhaven
Fol:∀x (Located(newhaven, x) → ¬High(x))
2.Text:All buildings managed by the Yale Housing are located in New Haven.
Predicates:
YaleHousing(x),Located(x,y)
Constants:
newhaven
Fol:∀x (YaleHousing(x) → Located(newhaven, x))
3.Text:All buildings in Manhattans are high.
Predicates:
High(x),Located(x,y)
Constants:
manhattans
Fol:∀x (Located(manhattans, x) → High(x))
4.Text:All buildings owned by Bloomberg are located in Manhattans.
Predicates:
Bloomberg(x),Located(x,y)
Constants:
manhattans
Fol:∀x (Bloomberg(x) → Located(manhattans, x))
5.Text:All buildings with the Bloomberg logo are owned by Bloomberg.
Predicates:
BloombergLogo(x),Bloomberg(x)
Fol:∀x (BloombergLogo(x) → Bloomberg(x))
6.Text:Tower A is managed by the Yale Housing.
Predicates:
YaleHousing(x)
Constants:
tower-a
Fol:YaleHousing(tower-a)
7.Text:Tower B is with the Bloomberg logo.
Predicates:
BloombergLogo(x)
Constants:
tower-b
Fol:BloombergLogo(tower-b)
Conclusion:
Text:Tower B is located in New Haven.
Predicates:
Located(x,y)
Constants:
tower-b,newhaven
Fol:Located(newhaven, tower-b)"
"Premises:
1.Everyone that uses a football can throw a football.
2.If someone plays football, then they use a football.
3.Either someone is a football player or a basketball player.
4.Every basketball player is tall.
5.Everyone that can throw a football can throw a football with a spiral.
6.If someone is tall, then they are in shape.
7.If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football.

Conclusion:
Jack is in shape.","We can get these predicates:
UseFootball(x),ThrowFootball(x),PlayFootball(x),BasketballPlayer(x),Tall(x),ThrowFootballSpiral(x),InShape(x)
We can get these constants:
jack
Let's translate one by one.
Premises:
1.Text:Everyone that uses a football can throw a football.
Predicates:
ThrowFootball(x),UseFootball(x)
Fol:∀x (UseFootball(x) → ThrowFootball(x))
2.Text:If someone plays football, then they use a football.
Predicates:
UseFootball(x),PlayFootball(x)
Fol:∀x (PlayFootball(x) → UseFootball(x))
3.Text:Either someone is a football player or a basketball player.
Predicates:
BasketballPlayer(x),PlayFootball(x)
Fol:∀x (BasketballPlayer(x) ∨ PlayFootball(x))
4.Text:Every basketball player is tall.
Predicates:
BasketballPlayer(x),Tall(x)
Fol:∀x (BasketballPlayer(x) → Tall(x))
5.Text:Everyone that can throw a football can throw a football with a spiral.
Predicates:
ThrowFootball(x),ThrowFootballSpiral(x)
Fol:∀x (ThrowFootball(x) → ThrowFootballSpiral(x))
6.Text:If someone is tall, then they are in shape.
Predicates:
InShape(x),Tall(x)
Fol:∀x (Tall(x) → InShape(x))
7.Text:If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football.
Predicates:
BasketballPlayer(x),ThrowFootball(x),Tall(x)
Constants:
jack
Fol:¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)
Conclusion:
Text:Jack is in shape.
Predicates:
InShape(x)
Constants:
jack
Fol:InShape(jack)"
"Premises:
1.No low-scoring players are top players in the league.
2.Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.
3.All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.
4.No players who are solid at shooting 2-pointers are bad at mid-range shots.
5.Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.

Conclusion:
Candace is a top player in the league.","We can get these predicates:
LowScore(x),TopPlayer(x),ThreePointer(x),TwoPointer(x),BadMid(x)
We can get these constants:
candace
Let's translate one by one.
Premises:
1.Text:No low-scoring players are top players in the league.
Predicates:
TopPlayer(x),LowScore(x)
Fol:∀x (LowScore(x) → ¬TopPlayer(x))
2.Text:Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.
Predicates:
TopPlayer(x),ThreePointer(x)
Fol:∀x (TopPlayer(x) ∨ ThreePointer(x))
3.Text:All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.
Predicates:
TwoPointer(x),ThreePointer(x)
Fol:∀x (ThreePointer(x) → TwoPointer(x))
4.Text:No players who are solid at shooting 2-pointers are bad at mid-range shots.
Predicates:
TwoPointer(x),BadMid(x)
Fol:∀x (TwoPointer(x) → ¬BadMid(x))
5.Text:Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.
Predicates:
LowScore(x),ThreePointer(x)
Constants:
candace
Fol:LowScore(candace) ⊕ ThreePointer(candace)
Conclusion:
Text:Candace is a top player in the league.
Predicates:
TopPlayer(x)
Constants:
candace
Fol:TopPlayer(candace)"
"Premises:
1.If people play the instrument in the concert, then he is good at playing this kind of instrument.
2.Peter plays piano, violin, and saxophone.
3.Peter was invited to play piano at the concert hall.
4.Oliver and Peter were both invited to perform in the concert.
5.Oliver plays a different musical instrument from Peter in the concert.

Conclusion:
Oliver plays violin in the concert.","We can get these predicates:
PlayInConcert(x,y),GoodAt(x,y),Play(x,y),PlayerInConcert(x)
We can get these constants:
piano,oliver
Let's translate one by one.
Premises:
1.Text:If people play the instrument in the concert, then he is good at playing this kind of instrument.
Predicates:
GoodAt(x,y),PlayInConcert(x,y)
Fol:∀y (∀x (PlayInConcert(y, x) → GoodAt(y, x)))
2.Text:Peter plays piano, violin, and saxophone.
Predicates:
Play(x,y)
Constants:
peter,violin,piano
Fol:Play(peter, piano) ∧Play(peter, violin)
3.Text:Peter was invited to play piano at the concert hall.
Predicates:
PlayInConcert(x,y)
Constants:
peter,piano
Fol:PlayInConcert(peter, piano)
4.Text:Oliver and Peter were both invited to perform in the concert.
Predicates:
PlayerInConcert(x)
Constants:
peter,oliver
Fol:PlayerInConcert(peter) ∧ PlayerInConcert(oliver)
5.Text:Oliver plays a different musical instrument from Peter in the concert.
Predicates:
PlayInConcert(x,y)
Constants:
oliver,piano
Fol:¬PlayInConcert(oliver, piano)
Conclusion:
Text:Oliver plays violin in the concert.
Predicates:
PlayInConcert(x,y)
Constants:
violin,oliver
Fol:PlayInConcert(oliver, violin)"
"Premises:
1.No touring musicians are permanent members of an orchestra.
2.Musicians are either permanent members of an orchestra or have a unique musical voice or style.
3.All musicians who have a unique musical voice or style are interesting as individual performers.
4.All musicians who are interesting as individual performers are capable of attracting large audiences.
5.If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences.

Conclusion:
Ryan is either a permanent member of an orchestra or a touring soloist musician.","We can get these predicates:
Orchestra(x),Touring(x),Unique(x),Interesting(x),Capable(x)
We can get these constants:
ryan
Let's translate one by one.
Premises:
1.Text:No touring musicians are permanent members of an orchestra.
Predicates:
Orchestra(x),Touring(x)
Fol:∀x (Orchestra(x) → ¬Touring(x))
2.Text:Musicians are either permanent members of an orchestra or have a unique musical voice or style.
Predicates:
Unique(x),Orchestra(x)
Fol:∀x (Orchestra(x) ⊕ Unique(x))
3.Text:All musicians who have a unique musical voice or style are interesting as individual performers.
Predicates:
Unique(x),Interesting(x)
Fol:∀x (Unique(x) → Interesting(x))
4.Text:All musicians who are interesting as individual performers are capable of attracting large audiences.
Predicates:
Capable(x),Interesting(x)
Fol:∀x (Interesting(x) → Capable(x))
5.Text:If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences.
Predicates:
Unique(x),Capable(x),Touring(x),Interesting(x)
Constants:
ryan
Fol:(Interesting(ryan) ∧ Unique(ryan)) → ¬(Touring(ryan) ⊕ Capable(ryan))
Conclusion:
Text:Ryan is either a permanent member of an orchestra or a touring soloist musician.
Predicates:
Orchestra(x),Touring(x)
Constants:
ryan
Fol:Orchestra(ryan) ∨ Touring(ryan)"
"Premises:
1.Products are either produced in China or the US.
2.All produced in China are labeled.
3.All produced in the US are sold in the US.
4.If labeled, then the product is cheaper.
5.All sold in the US are sold in Walmart.
6.All displayed on the homepage are sold in Walmart.
7.No products returned by customers are sold in Walmart.
8.G-910 is either displayed on the homepage or cheaper.

Conclusion:
G-910 is a product returned by customers.","We can get these predicates:
China(x),US(x),Labeled(x),SoldInUS(x),Cheaper(x),SoldInWalmart(x),DisplayedInHomepage(x),ReturnedByCustomer(x)
We can get these constants:
g910
Let's translate one by one.
Premises:
1.Text:Products are either produced in China or the US.
Predicates:
China(x),US(x)
Fol:∀x (China(x) ⊕ US(x))
2.Text:All produced in China are labeled.
Predicates:
Labeled(x),China(x)
Fol:∀x (China(x) → Labeled(x))
3.Text:All produced in the US are sold in the US.
Predicates:
US(x),SoldInUS(x)
Fol:∀x (US(x) → SoldInUS(x))
4.Text:If labeled, then the product is cheaper.
Predicates:
Labeled(x),Cheaper(x)
Fol:∀x (Labeled(x) → Cheaper(x))
5.Text:All sold in the US are sold in Walmart.
Predicates:
SoldInWalmart(x),SoldInUS(x)
Fol:∀x (SoldInUS(x) → SoldInWalmart(x))
6.Text:All displayed on the homepage are sold in Walmart.
Predicates:
DisplayedInHomepage(x),SoldInWalmart(x)
Fol:∀x (DisplayedInHomepage(x) → SoldInWalmart(x))
7.Text:No products returned by customers are sold in Walmart.
Predicates:
SoldInWalmart(x),ReturnedByCustomer(x)
Fol:∀x (ReturnedByCustomer(x) → ¬SoldInWalmart(x))
8.Text:G-910 is either displayed on the homepage or cheaper.
Predicates:
DisplayedInHomepage(x),Cheaper(x)
Constants:
g910
Fol:¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))
Conclusion:
Text:G-910 is a product returned by customers.
Predicates:
ReturnedByCustomer(x)
Constants:
g910
Fol:ReturnedByCustomer(g910)"
"Premises:
1.All dispensable things are environment-friendly.
2.All woodware is dispensable.
3.All paper is woodware.
4.No good things are bad.
5.All environment-friendly things are good.
6.A worksheet is either paper or is environment-friendly.

Conclusion:
A worksheet is bad.","We can get these predicates:
Dispensable(x),EnvironmentFriendly(x),Woodware(x),Paper(x),Good(x),Bad(x)
We can get these constants:
worksheet
Let's translate one by one.
Premises:
1.Text:All dispensable things are environment-friendly.
Predicates:
EnvironmentFriendly(x),Dispensable(x)
Fol:∀x (Dispensable(x) → EnvironmentFriendly(x))
2.Text:All woodware is dispensable.
Predicates:
Dispensable(x),Woodware(x)
Fol:∀x (Woodware(x) → Dispensable(x))
3.Text:All paper is woodware.
Predicates:
Paper(x),Woodware(x)
Fol:∀x (Paper(x) → Woodware(x))
4.Text:No good things are bad.
Predicates:
Bad(x),Good(x)
Fol:∀x (Good(x) → ¬Bad(x))
5.Text:All environment-friendly things are good.
Predicates:
EnvironmentFriendly(x),Good(x)
Fol:∀x (EnvironmentFriendly(x) → Good(x))
6.Text:A worksheet is either paper or is environment-friendly.
Predicates:
EnvironmentFriendly(x),Paper(x)
Constants:
worksheet
Fol:Paper(worksheet) ⊕ EnvironmentFriendly(worksheet)
Conclusion:
Text:A worksheet is bad.
Predicates:
Bad(x)
Constants:
worksheet
Fol:Bad(worksheet)"
"Premises:
1.If a person is the leader of a country for life, that person is in a monarchy.
2.Leaders are either a king or a queen.
3.Queens are female.
4.Kings are male.
5.Elizabeth is a queen.
6.Elizabeth is a leader

Conclusion:
Elizabeth is a leader of a country.","We can get these predicates:
Leader(x),InMonarchy(x),King(x),Queen(x),Female(x),Male(x)
We can get these constants:
elizabeth
Let's translate one by one.
Premises:
1.Text:If a person is the leader of a country for life, that person is in a monarchy.
Predicates:
InMonarchy(x),Leader(x)
Fol:∀x (Leader(x) → InMonarchy(x))
2.Text:Leaders are either a king or a queen.
Predicates:
Queen(x),Leader(x),King(x)
Fol:∀x (Leader(x) → King(x) ⊕ Queen(x))
3.Text:Queens are female.
Predicates:
Queen(x),Female(x)
Fol:∀x (Queen(x) → Female(x))
4.Text:Kings are male.
Predicates:
Male(x),King(x)
Fol:∀x (King(x) → Male(x))
5.Text:Elizabeth is a queen.
Predicates:
Queen(x)
Constants:
elizabeth
Fol:Queen(elizabeth)
6.Text:Elizabeth is a leader
Predicates:
Leader(x)
Constants:
elizabeth
Fol:Leader(elizabeth)
Conclusion:
Text:Elizabeth is a leader of a country.
Predicates:
Leader(x)
Constants:
elizabeth
Fol:Leader(elizabeth)"
"Premises:
1.No athletes are slow runners.
2.All professional basketball players are athletes.
3.All NBA players are professional basketball players.
4.All Knicks players are NBA players.
5.Jim is either not a professional basketball player or not a slow runner.

Conclusion:
Jim is not a Knicks player.","We can get these predicates:
Athlete(x),SlowRunner(x),ProfessionalBasketballPlayer(x),NBAPlayer(x),KnicksPlayer(x)
We can get these constants:
jim
Let's translate one by one.
Premises:
1.Text:No athletes are slow runners.
Predicates:
Athlete(x),SlowRunner(x)
Fol:∀x (Athlete(x) → ¬SlowRunner(x))
2.Text:All professional basketball players are athletes.
Predicates:
Athlete(x),ProfessionalBasketballPlayer(x)
Fol:∀x (ProfessionalBasketballPlayer(x) → Athlete(x))
3.Text:All NBA players are professional basketball players.
Predicates:
NBAPlayer(x),ProfessionalBasketballPlayer(x)
Fol:∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))
4.Text:All Knicks players are NBA players.
Predicates:
NBAPlayer(x),KnicksPlayer(x)
Fol:∀x (KnicksPlayer(x) → NBAPlayer(x))
5.Text:Jim is either not a professional basketball player or not a slow runner.
Predicates:
ProfessionalBasketballPlayer(x),SlowRunner(x)
Constants:
jim
Fol:¬(ProfessionalBasketballPlayer(jim) ⊕ SlowRunner(jim))
Conclusion:
Text:Jim is not a Knicks player.
Predicates:
KnicksPlayer(x)
Constants:
jim
Fol:¬KnicksPlayer(jim)"
"Premises:
1.A La Liga soccer team ranks higher than another if it receives more points.
2.If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher.
3.Real Madrid and Barcelona are both La Liga soccer teams.
4.In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points.
5.In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them.

Conclusion:
In La Liga 2021-2022, Real Madrid ranks higher than Barcelona.","We can get these predicates:
LaLiga(x),MorePoints(x,y),HigherRank(x,y),MorePointsInGameBetween(x,y)
We can get these constants:
barcelona,realMadrid
Let's translate one by one.
Premises:
1.Text:A La Liga soccer team ranks higher than another if it receives more points.
Predicates:
MorePoints(x,y),HigherRank(x,y),LaLiga(x)
Fol:∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ MorePoints(x, y) → HigherRank(x, y))
2.Text:If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher.
Predicates:
MorePoints(x,y),MorePointsInGameBetween(x,y),HigherRank(x,y),LaLiga(x)
Fol:∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ ¬MorePoints(x, y) ∧ ¬MorePoints(y, x) ∧ MorePointsInGameBetween(x, y) → HigherRank(x, y))
3.Text:Real Madrid and Barcelona are both La Liga soccer teams.
Predicates:
LaLiga(x)
Constants:
barcelona,realMadrid
Fol:LaLiga(realMadrid) ∧ LaLiga(barcelona)
4.Text:In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points.
Predicates:
MorePoints(x,y)
Constants:
barcelona,realMadrid
Fol:MorePoints(realMadrid, barcelona)
5.Text:In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them.
Predicates:
MorePointsInGameBetween(x,y)
Constants:
barcelona,realMadrid
Fol:¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid)
Conclusion:
Text:In La Liga 2021-2022, Real Madrid ranks higher than Barcelona.
Predicates:
HigherRank(x,y)
Constants:
barcelona,realMadrid
Fol:HigherRank(realMadrid, barcelona)"
"Premises:
1.If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent.
2.All Leetcode problems that are recommended to novices are easy.
3.A Leetode problem is either easy or hard.
4.Leetcode problems that are starred by more than 1 thousand users are hard.
5.2Sum is recommended to novices.
6.4Sum is starred by more than 1 thousand users.

Conclusion:
2Sum has an AC rate higher than 20 percent.","We can get these predicates:
Easy(x),LowerAC(x),Recommended(x),Hard(x),Starred(x)
We can get these constants:
foursum
Let's translate one by one.
Premises:
1.Text:If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent.
Predicates:
LowerAC(x),Easy(x)
Fol:∀x (Easy(x) → LowerAC(x))
2.Text:All Leetcode problems that are recommended to novices are easy.
Predicates:
Recommended(x),Easy(x)
Fol:∀x (Recommended(x) → Easy(x))
3.Text:A Leetode problem is either easy or hard.
Predicates:
Hard(x),Easy(x)
Fol:∀x (Easy(x) ⊕ Hard(x))
4.Text:Leetcode problems that are starred by more than 1 thousand users are hard.
Predicates:
Starred(x),Hard(x)
Fol:∀x (Starred(x) → Hard(x))
5.Text:2Sum is recommended to novices.
Predicates:
Recommended(x)
Constants:
twosum
Fol:Recommended(twosum)
6.Text:4Sum is starred by more than 1 thousand users.
Predicates:
Starred(x)
Constants:
foursum
Fol:Starred(foursum)
Conclusion:
Text:2Sum has an AC rate higher than 20 percent.
Predicates:
LowerAC(x)
Constants:
twosum
Fol:¬LowerAC(twosum)"
"Premises:
1.All rental cars cost the renter money.
2.Whenever Sarah goes to Vermont, Sarah drives there.
3.For someone who does not own a car to drive somewhere, they must either borrow a car or rent a car.
4.Sarah doesn’t own a car.
5.Sarah never borrows a car to go camping.
6.Sarah is going to go camping in Vermont this weekend.
7.To go camping somewhere, you must go to that place.

Conclusion:
Sarah will spend money this weekend.","We can get these predicates:
Rent(x,y),Spend(x,y),GoesTo(x,y),DriveTo(x,y),Own(x,y),Borrow(x,y),Camping(x,y)
We can get these constants:

Let's translate one by one.
Premises:
1.Text:All rental cars cost the renter money.
Predicates:
Rent(x,y),Spend(x,y)
Constants:
car,money
Fol:∀x (Rent(x, car) → Spend(x, money))
2.Text:Whenever Sarah goes to Vermont, Sarah drives there.
Predicates:
DriveTo(x,y),GoesTo(x,y)
Constants:
sarah,vermont
Fol:GoesTo(sarah, vermont) → DriveTo(sarah, vermont)
3.Text:For someone who does not own a car to drive somewhere, they must either borrow a car or rent a car.
Predicates:
DriveTo(x,y),Rent(x,y),Borrow(x,y),Own(x,y)
Constants:
car
Fol:∀x ∀y (¬Own(x, car) ∧ DriveTo(x, y) → Borrow(x, car) ⊕ Rent(x, car))
4.Text:Sarah doesn’t own a car.
Predicates:
Own(x,y)
Constants:
sarah,car
Fol:¬Own(sarah, car)
5.Text:Sarah never borrows a car to go camping.
Predicates:
Borrow(x,y),Camping(x,y)
Constants:
sarah,car
Fol:∀x (Camping(sarah, x) → ¬(Borrow(sarah, car)))
6.Text:Sarah is going to go camping in Vermont this weekend.
Predicates:
Camping(x,y)
Constants:
sarah,vermont
Fol:Camping(sarah, vermont)
7.Text:To go camping somewhere, you must go to that place.
Predicates:
GoesTo(x,y),Camping(x,y)
Fol:∀x ∀y (Camping(x, y) → GoesTo(x, y))
Conclusion:
Text:Sarah will spend money this weekend.
Predicates:
Spend(x,y)
Constants:
sarah,money
Fol:Spend(sarah, money)"
"Premises:
1.Some fish may sting.
2.Stonefish is a fish.
3.It stings to step on a stonefish.
4.Stonefish stings cause death if not treated.
5.To treat stonefish stings, apply heat to the affected area or use an antivenom.

Conclusion:
Stings of some fish can cause death if not treated.","We can get these predicates:
Fish(x),Sting(x,y),StepOn(x,y),Treated(x),CauseDeath(x),ApplyHeat(x),UseAntivenom(x)
We can get these constants:
stonefish
Let's translate one by one.
Premises:
1.Text:Some fish may sting.
Predicates:
Fish(x),Sting(x,y)
Fol:∃x ∃y (Fish(x) → Sting(x,y))
2.Text:Stonefish is a fish.
Predicates:
Fish(x)
Constants:
stonefish
Fol:Fish(stonefish)
3.Text:It stings to step on a stonefish.
Predicates:
StepOn(x,y),Sting(x,y)
Constants:
stonefish
Fol:∀x (StepOn(stonefish, x) → Sting(stonefish, x))
4.Text:Stonefish stings cause death if not treated.
Predicates:
Treated(x),Sting(x,y),CauseDeath(x)
Constants:
stonefish
Fol:∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))
5.Text:To treat stonefish stings, apply heat to the affected area or use an antivenom.
Predicates:
ApplyHeat(x),UseAntivenom(x),Treated(x),Sting(x,y)
Constants:
stonefish
Fol:∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))
Conclusion:
Text:Stings of some fish can cause death if not treated.
Predicates:
Fish(x),Treated(x),Sting(x,y),CauseDeath(x)
Fol:∃x ∃y (Fish(x) ∧ Sting(x, y) ∧ ¬Treated(y) → CauseDeath(y))"
"Premises:
1.LanguageA is a universal language
2.If a universal language exists, then for every two people if they both know the same universal language they can communicate.
3.Katya cannot communicate with Danil.
4.Katya knows LanguageA.

Conclusion:
Danil knows LanguageA.","We can get these predicates:
UniversalLanguage(x),Know(x,y),Communicate(x,y)
We can get these constants:
danil,katya
Let's translate one by one.
Premises:
1.Text:LanguageA is a universal language
Predicates:
UniversalLanguage(x)
Constants:
languageA
Fol:UniversalLanguage(languageA)
2.Text:If a universal language exists, then for every two people if they both know the same universal language they can communicate.
Predicates:
Know(x,y),UniversalLanguage(x),Communicate(x,y)
Fol:∀x ∀y (∃z (Know(x, z) ∧ Know(y, z) ∧ UniversalLanguage(z)) → Communicate(x, y))
3.Text:Katya cannot communicate with Danil.
Predicates:
Know(x,y)
Constants:
languageA,katya
Fol:Know(katya, languageA)
4.Text:Katya knows LanguageA.
Predicates:
Communicate(x,y)
Constants:
katya,danil
Fol:¬Communicate(katya, danil)
Conclusion:
Text:Danil knows LanguageA.
Predicates:
Know(x,y)
Constants:
languageA,danil
Fol:Know(danil, languageA)"
"Premises:
1.If a legislator is found guilty of stealing government funds, they will be suspended from office.
2.Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.
3.Tiffany T. Alston was found guilty of stealing government funds in 2012.

Conclusion:
Tiffany T. Alston was suspended from the Maryland House of Delegates.","We can get these predicates:
IsLegislator(x),StealsFunds(x),Suspended(x)
We can get these constants:
tiffanyTAlston
Let's translate one by one.
Premises:
1.Text:If a legislator is found guilty of stealing government funds, they will be suspended from office.
Predicates:
StealsFunds(x),IsLegislator(x),Suspended(x)
Fol:∀x (IsLegislator(x) ∧ StealsFunds(x) → Suspended(x))
2.Text:Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.
Predicates:
IsLegislator(x)
Constants:
tiffanyTAlston
Fol:IsLegislator(tiffanyTAlston)
3.Text:Tiffany T. Alston was found guilty of stealing government funds in 2012.
Predicates:
StealsFunds(x)
Constants:
tiffanyTAlston
Fol:StealsFunds(tiffanyTAlston)
Conclusion:
Text:Tiffany T. Alston was suspended from the Maryland House of Delegates.
Predicates:
Suspended(x)
Constants:
tiffanyTAlston
Fol:Suspended(tiffanyTAlston)"
"Premises:
1.Students either go to the park or go to the movies.
2.No student who enjoys nature has free time during the weekend.
3.All students who go to the movies enjoy nature.
4.All students who do not have class during the weekend have free time during the weekend.
5.All students not in summer camp do not have class during the weekend.
6.James does not have class during the weekend.

Conclusion:
James goes to the park or is in summer camp.","We can get these predicates:
Park(x),Movies(x),Nature(x),FreeTime(x),NoClass(x),SummerCamp(x)
We can get these constants:
james
Let's translate one by one.
Premises:
1.Text:Students either go to the park or go to the movies.
Predicates:
Movies(x),Park(x)
Fol:∀x (Park(x) ⊕ Movies(x))
2.Text:No student who enjoys nature has free time during the weekend.
Predicates:
FreeTime(x),Nature(x)
Fol:∀x (Nature(x) → ¬FreeTime(x))
3.Text:All students who go to the movies enjoy nature.
Predicates:
Movies(x),Nature(x)
Fol:∀x (Movies(x) → Nature(x))
4.Text:All students who do not have class during the weekend have free time during the weekend.
Predicates:
FreeTime(x),NoClass(x)
Fol:∀x (NoClass(x) → FreeTime(x))
5.Text:All students not in summer camp do not have class during the weekend.
Predicates:
NoClass(x),SummerCamp(x)
Fol:∀x (SummerCamp(x) → NoClass(x))
6.Text:James does not have class during the weekend.
Predicates:
NoClass(x)
Constants:
james
Fol:NoClass(james)
Conclusion:
Text:James goes to the park or is in summer camp.
Predicates:
Park(x),SummerCamp(x)
Constants:
james
Fol:Park(james) ∨ SummerCamp(james)"
"Premises:
1.All eels are fish.
2.No fish are plants.
3.A thing is either a plant or animal.
4.Nothing that breathes is paper.
5.All animals breathe.
6.If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.

Conclusion:
Sea eel is a paper.","We can get these predicates:
Eel(x),Fish(x),Plant(x),Animal(x),Breathe(x),Paper(x)
We can get these constants:
seaEel
Let's translate one by one.
Premises:
1.Text:All eels are fish.
Predicates:
Fish(x),Eel(x)
Fol:∀x  (Eel (x)→  Fish (x))
2.Text:No fish are plants.
Predicates:
Fish(x),Plant(x)
Fol:∀x  (Fish (x)→ ¬ Plant (x))
3.Text:A thing is either a plant or animal.
Predicates:
Animal(x),Plant(x)
Fol:∀x ( Plant (x) ∨  Animal (x))
4.Text:Nothing that breathes is paper.
Predicates:
Breathe(x),Paper(x)
Fol:∀x  (Breathe (x)→ ¬ Paper (x))
5.Text:All animals breathe.
Predicates:
Animal(x),Breathe(x)
Fol:∀x  (Animal (x)→  Breathe (x))
6.Text:If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.
Predicates:
Animal(x),Plant(x),Eel(x)
Constants:
seaEel
Fol: Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel)
Conclusion:
Text:Sea eel is a paper.
Predicates:
Paper(x)
Constants:
seaEel
Fol:Paper(seaEel)"
"Premises:
1.People eat meat regularly or are vegetation.
2.If people eat meat regularly, then they enjoy eating hamburgers and steaks.
3.All people who are vegetarian are conscious of the environment or their health.
4.If people are conscious about the environment or their health, then they do not go to fast food places often.
5.If people have busy schedules without time to cook, then they go to fast food places often.
6.If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often.

Conclusion:
If Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks, then Jeremy neither has a busy schedule without having time to cook nor enjoys eating hamburgers and steaks.","We can get these predicates:
Meat(x),Vegetarian(x),Hamburgers(x),Conscious(x),FastFood(x),Busy(x)
We can get these constants:
jeremy
Let's translate one by one.
Premises:
1.Text:People eat meat regularly or are vegetation.
Predicates:
Meat(x),Vegetarian(x)
Fol:∀x (Meat(x) ∨ Vegetarian(x))
2.Text:If people eat meat regularly, then they enjoy eating hamburgers and steaks.
Predicates:
Meat(x),Hamburgers(x)
Fol:∀x (Meat(x) → Hamburgers(x))
3.Text:All people who are vegetarian are conscious of the environment or their health.
Predicates:
Conscious(x),Vegetarian(x)
Fol:∀x (Vegetarian(x) → Conscious(x))
4.Text:If people are conscious about the environment or their health, then they do not go to fast food places often.
Predicates:
Conscious(x),FastFood(x)
Fol:∀x (Conscious(x) → ¬FastFood(x))
5.Text:If people have busy schedules without time to cook, then they go to fast food places often.
Predicates:
Busy(x),FastFood(x)
Fol:∀x (Busy(x) → FastFood(x))
6.Text:If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often.
Predicates:
Conscious(x),FastFood(x)
Constants:
jeremy
Fol:¬(FastFood(jeremy) ∧ Conscious(jeremy)) → FastFood(jeremy)
Conclusion:
Text:If Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks, then Jeremy neither has a busy schedule without having time to cook nor enjoys eating hamburgers and steaks.
Predicates:
Busy(x),Hamburgers(x)
Constants:
jeremy
Fol:(Busy(jeremy) ∨ Hamburgers(jeremy)) → ¬Busy(jeremy) ∧ ¬Hamburgers(jeremy)"
"Premises:
1.All young adults go on a diet.
2.All college students are young adults.
3.All Yale students are college students.
4.Someone is either a Yale student or a Harvard student.
5.All Harvard students are diligent.
6.If Susan is a Harvard student, then she is a young adult.
7.If Susan is a Yale student, then she does not go on a diet.

Conclusion:
Susan goes on a diet and is diligent.","We can get these predicates:
YoungAdult(x),GoOnDiet(x),CollegeStudent(x),YaleStudent(x),HarvardStudent(x),Diligent(x)
We can get these constants:
susan
Let's translate one by one.
Premises:
1.Text:All young adults go on a diet.
Predicates:
YoungAdult(x),GoOnDiet(x)
Fol:∀x (YoungAdult(x) → GoOnDiet(x))
2.Text:All college students are young adults.
Predicates:
YoungAdult(x),CollegeStudent(x)
Fol:∀x (CollegeStudent(x) → YoungAdult(x))
3.Text:All Yale students are college students.
Predicates:
CollegeStudent(x),YaleStudent(x)
Fol:∀x (YaleStudent(x) → CollegeStudent(x))
4.Text:Someone is either a Yale student or a Harvard student.
Predicates:
HarvardStudent(x),YaleStudent(x)
Fol:∀x (YaleStudent(x) ∨ HarvardStudent(x))
5.Text:All Harvard students are diligent.
Predicates:
Diligent(x),HarvardStudent(x)
Fol:∀x (HarvardStudent(x) → Diligent(x))
6.Text:If Susan is a Harvard student, then she is a young adult.
Predicates:
YoungAdult(x),HarvardStudent(x)
Constants:
susan
Fol:HarvardStudent(susan) → YoungAdult(susan)
7.Text:If Susan is a Yale student, then she does not go on a diet.
Predicates:
GoOnDiet(x),YaleStudent(x)
Constants:
susan
Fol:YaleStudent(susan) → ¬GoOnDiet(susan)
Conclusion:
Text:Susan goes on a diet and is diligent.
Predicates:
GoOnDiet(x),Diligent(x)
Constants:
susan
Fol:GoOnDiet(susan) ∧ Diligent(susan)"
"Premises:
1.Sam is doing a project.
2.A project is written either in C++ or in Python.
3.If Sam does a project written in Python, he will not use a Mac.
4.Sam is using a Mac.
5.If Sam uses a Mac, he will play a song.
6.If a song is not ""Perfect"", Sam will never play it.

Conclusion:
The song Sam is playing is ""Perfect"".","We can get these predicates:
Project(x),Do(x,y),WrittenIn(x,y),Use(x,y),Song(x),Play(x,y),Be(x,y)
We can get these constants:
perfect,sam
Let's translate one by one.
Premises:
1.Text:Sam is doing a project.
Predicates:
Project(x),Do(x,y)
Constants:
sam
Fol:∃x (Project(x) ∧ Do(sam, x))
2.Text:A project is written either in C++ or in Python.
Predicates:
Project(x),WrittenIn(x,y)
Constants:
python,c++
Fol: ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))
3.Text:If Sam does a project written in Python, he will not use a Mac.
Predicates:
Project(x),Do(x,y),Use(x,y),WrittenIn(x,y)
Constants:
python,sam,mac
Fol: ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))
4.Text:Sam is using a Mac.
Predicates:
Use(x,y)
Constants:
sam,mac
Fol: Use(sam, mac)
5.Text:If Sam uses a Mac, he will play a song.
Predicates:
Song(x),Play(x,y),Use(x,y)
Constants:
sam,mac
Fol: Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))
6.Text:If a song is not ""Perfect"", Sam will never play it.
Predicates:
Play(x,y),Be(x,y)
Constants:
perfect,sam
Fol: ∀x (¬Be(x, perfect) → ¬Play(sam, x))
Conclusion:
Text:The song Sam is playing is ""Perfect"".
Predicates:
Play(x,y),Song(x),Be(x,y)
Constants:
perfect,sam
Fol:∃x (Song(x) ∧ Play(sam, x) ∧ Be(x, perfect))"
"Premises:
1.Vic DiCara plays guitar and bass.
2.The only style of music Vic DiCara plays is punk music.
3.Vic DiCara played in the band Inside Out.

Conclusion:
Inside Out was a punk band.","We can get these predicates:
Play(x,y),Music(x,y),Band(x,y)
We can get these constants:
vicdicara,insideOut
Let's translate one by one.
Premises:
1.Text:Vic DiCara plays guitar and bass.
Predicates:
Play(x,y)
Constants:
vicdicara,bass,guitar
Fol:Play(vicdicara, guitar) ∧ Play(vicdicara, bass)
2.Text:The only style of music Vic DiCara plays is punk music.
Predicates:
Music(x,y)
Constants:
punk,vicdicara
Fol:¬(∃x (Music (vicdicara, punk) ∧ Music (vicdicara, x)))
3.Text:Vic DiCara played in the band Inside Out.
Predicates:
Band(x,y)
Constants:
vicdicara,insideOut
Fol:Band(vicdicara, insideOut)
Conclusion:
Text:Inside Out was a punk band.
Predicates:
Band(x,y)
Constants:
punk,insideOut
Fol:Band(insideOut, punk)"
"Premises:
1.All people who regularly drink coffee are dependent on caffeine.
2.People either regularly drink coffee or joke about being addicted to caffeine.
3.No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.
4.Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.
5.If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student.

Conclusion:
Rina is a person who jokes about being addicted to caffeine or unaware that caffeine is a drug.","We can get these predicates:
Drinks(x),Dependent(x),Jokes(x),Unaware(x),Student(x)
We can get these constants:
rina
Let's translate one by one.
Premises:
1.Text:All people who regularly drink coffee are dependent on caffeine.
Predicates:
Drinks(x),Dependent(x)
Fol:∀x (Drinks(x) → Dependent(x))
2.Text:People either regularly drink coffee or joke about being addicted to caffeine.
Predicates:
Drinks(x),Jokes(x)
Fol:∀x (Drinks(x) ⊕ Jokes(x))
3.Text:No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.
Predicates:
Unaware(x),Jokes(x)
Fol:∀x (Jokes(x) → ¬Unaware(x))
4.Text:Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.
Predicates:
Unaware(x),Student(x)
Constants:
rina
Fol:(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))
5.Text:If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student.
Predicates:
Dependent(x),Student(x)
Constants:
rina
Fol:¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))
Conclusion:
Text:Rina is a person who jokes about being addicted to caffeine or unaware that caffeine is a drug.
Predicates:
Unaware(x),Jokes(x)
Constants:
rina
Fol:Jokes(rina) ∨ Unaware(rina)"
"Premises:
1.All fruits with the color red contain a large amount of vitamin C.
2.All apples are fruits with the color red.
3.All fruits containing a large amount of vitamin C are beneficial to people.
4.No fruits that are beneficial to people are on a warning list.
5.If K is not beneficial to people and also not an apple, then it is a fruit with the color red.

Conclusion:
K either contains a large amount of vitamin C or is on a warning list.","We can get these predicates:
RedFruit(x),VC(x),Apple(x),Benefit(x),WarningList(x)
We can get these constants:
k
Let's translate one by one.
Premises:
1.Text:All fruits with the color red contain a large amount of vitamin C.
Predicates:
RedFruit(x),VC(x)
Fol:∀x (RedFruit(x) → VC(x))
2.Text:All apples are fruits with the color red.
Predicates:
RedFruit(x),Apple(x)
Fol:∀x (Apple(x) → RedFruit(x))
3.Text:All fruits containing a large amount of vitamin C are beneficial to people.
Predicates:
VC(x),Benefit(x)
Fol:∀x (VC(x) → Benefit(x))
4.Text:No fruits that are beneficial to people are on a warning list.
Predicates:
WarningList(x),Benefit(x)
Fol:∀x (Benefit(x) → ¬WarningList(x))
5.Text:If K is not beneficial to people and also not an apple, then it is a fruit with the color red.
Predicates:
RedFruit(x),Apple(x),Benefit(x)
Constants:
k
Fol:¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)
Conclusion:
Text:K either contains a large amount of vitamin C or is on a warning list.
Predicates:
WarningList(x),VC(x)
Constants:
k
Fol:VC(k) ∨ WarningList(k)"
"Premises:
1.The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.
2.The Blake McFall Company Building was added to the National Register of Historic Places in 1990.
3.The Emmet Building is a five-story building in Portland, Oregon.
4.The Emmet Building was built in 1915.
5.The Emmet Building is another name for the Blake McFall Company Building.
6.John works at the Emmet Building.

Conclusion:
The Blake McFall Company Building is located in Portland, Oregon.","We can get these predicates:
Blake(x),Building(x),Historic(x,y),Emmet(x),FiveStory(x),Locate(x,y),Construct(x,y),Work(x,y)
We can get these constants:
john
Let's translate one by one.
Premises:
1.Text:The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.
Predicates:
Blake(x),Building(x)
Fol:∀x (Blake(x) → Building(x))
2.Text:The Blake McFall Company Building was added to the National Register of Historic Places in 1990.
Predicates:
Blake(x),Historic(x,y)
Fol:∀x (Blake(x) → Historic(x, year1990))
3.Text:The Emmet Building is a five-story building in Portland, Oregon.
Predicates:
FiveStory(x),Building(x),Locate(x,y),Emmet(x)
Constants:
portland
Fol:∀x (Emmet(x) → Building(x) ∧ FiveStory(x) ∧ Locate(x, portland))
4.Text:The Emmet Building was built in 1915.
Predicates:
Emmet(x),Construct(x,y)
Fol:∀x (Emmet(x) → Construct(x, year1915))
5.Text:The Emmet Building is another name for the Blake McFall Company Building.
Predicates:
Blake(x),Emmet(x)
Fol:∀x (Emmet(x) ↔ Blake(x))
6.Text:John works at the Emmet Building.
Predicates:
Emmet(x),Work(x,y)
Constants:
john
Fol:∃x (Emmet(x) ∧ Work(john, x))
Conclusion:
Text:The Blake McFall Company Building is located in Portland, Oregon.
Predicates:
Locate(x,y),Blake(x)
Constants:
portland
Fol:∀x (Blake(x) → Locate(x, portland))"